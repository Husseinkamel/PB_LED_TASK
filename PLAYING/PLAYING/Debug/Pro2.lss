
Pro2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a5a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  00000a5a  00000aee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  0080008a  0080008a  00000b18  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b18  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b48  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000238  00000000  00000000  00000b84  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000020d4  00000000  00000000  00000dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000acd  00000000  00000000  00002e90  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011ae  00000000  00000000  0000395d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000588  00000000  00000000  00004b0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c9c  00000000  00000000  00005094  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c21  00000000  00000000  00005d30  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d8  00000000  00000000  00007951  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 c1 04 	jmp	0x982	; 0x982 <__vector_6>
  1c:	0c 94 6f 04 	jmp	0x8de	; 0x8de <__vector_7>
  20:	0c 94 98 04 	jmp	0x930	; 0x930 <__vector_8>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e5       	ldi	r30, 0x5A	; 90
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 38       	cpi	r26, 0x8A	; 138
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e8       	ldi	r26, 0x8A	; 138
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 39       	cpi	r26, 0x91	; 145
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b1 01 	call	0x362	; 0x362 <main>
  8a:	0c 94 2b 05 	jmp	0xa56	; 0xa56 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <WriteIns>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	cf 93       	push	r28
  94:	c8 2f       	mov	r28, r24
  96:	60 e0       	ldi	r22, 0x00	; 0
  98:	89 e0       	ldi	r24, 0x09	; 9
  9a:	0e 94 bd 03 	call	0x77a	; 0x77a <DIO_WritePin>
  9e:	6c 2f       	mov	r22, r28
  a0:	66 1f       	adc	r22, r22
  a2:	66 27       	eor	r22, r22
  a4:	66 1f       	adc	r22, r22
  a6:	87 e0       	ldi	r24, 0x07	; 7
  a8:	0e 94 bd 03 	call	0x77a	; 0x77a <DIO_WritePin>
  ac:	c6 fb       	bst	r28, 6
  ae:	66 27       	eor	r22, r22
  b0:	60 f9       	bld	r22, 0
  b2:	86 e0       	ldi	r24, 0x06	; 6
  b4:	0e 94 bd 03 	call	0x77a	; 0x77a <DIO_WritePin>
  b8:	c5 fb       	bst	r28, 5
  ba:	66 27       	eor	r22, r22
  bc:	60 f9       	bld	r22, 0
  be:	85 e0       	ldi	r24, 0x05	; 5
  c0:	0e 94 bd 03 	call	0x77a	; 0x77a <DIO_WritePin>
  c4:	c4 fb       	bst	r28, 4
  c6:	66 27       	eor	r22, r22
  c8:	60 f9       	bld	r22, 0
  ca:	84 e0       	ldi	r24, 0x04	; 4
  cc:	0e 94 bd 03 	call	0x77a	; 0x77a <DIO_WritePin>
  d0:	61 e0       	ldi	r22, 0x01	; 1
  d2:	88 e0       	ldi	r24, 0x08	; 8
  d4:	0e 94 bd 03 	call	0x77a	; 0x77a <DIO_WritePin>
  d8:	8f ec       	ldi	r24, 0xCF	; 207
  da:	97 e0       	ldi	r25, 0x07	; 7
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <WriteIns+0x4a>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <WriteIns+0x50>
  e2:	00 00       	nop
  e4:	60 e0       	ldi	r22, 0x00	; 0
  e6:	88 e0       	ldi	r24, 0x08	; 8
  e8:	0e 94 bd 03 	call	0x77a	; 0x77a <DIO_WritePin>
  ec:	8f ec       	ldi	r24, 0xCF	; 207
  ee:	97 e0       	ldi	r25, 0x07	; 7
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <WriteIns+0x5e>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <WriteIns+0x64>
  f6:	00 00       	nop
  f8:	c3 fb       	bst	r28, 3
  fa:	66 27       	eor	r22, r22
  fc:	60 f9       	bld	r22, 0
  fe:	87 e0       	ldi	r24, 0x07	; 7
 100:	0e 94 bd 03 	call	0x77a	; 0x77a <DIO_WritePin>
 104:	c2 fb       	bst	r28, 2
 106:	66 27       	eor	r22, r22
 108:	60 f9       	bld	r22, 0
 10a:	86 e0       	ldi	r24, 0x06	; 6
 10c:	0e 94 bd 03 	call	0x77a	; 0x77a <DIO_WritePin>
 110:	c1 fb       	bst	r28, 1
 112:	66 27       	eor	r22, r22
 114:	60 f9       	bld	r22, 0
 116:	85 e0       	ldi	r24, 0x05	; 5
 118:	0e 94 bd 03 	call	0x77a	; 0x77a <DIO_WritePin>
 11c:	6c 2f       	mov	r22, r28
 11e:	61 70       	andi	r22, 0x01	; 1
 120:	84 e0       	ldi	r24, 0x04	; 4
 122:	0e 94 bd 03 	call	0x77a	; 0x77a <DIO_WritePin>
 126:	61 e0       	ldi	r22, 0x01	; 1
 128:	88 e0       	ldi	r24, 0x08	; 8
 12a:	0e 94 bd 03 	call	0x77a	; 0x77a <DIO_WritePin>
 12e:	8f ec       	ldi	r24, 0xCF	; 207
 130:	97 e0       	ldi	r25, 0x07	; 7
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <WriteIns+0xa0>
 136:	00 c0       	rjmp	.+0      	; 0x138 <WriteIns+0xa6>
 138:	00 00       	nop
 13a:	60 e0       	ldi	r22, 0x00	; 0
 13c:	88 e0       	ldi	r24, 0x08	; 8
 13e:	0e 94 bd 03 	call	0x77a	; 0x77a <DIO_WritePin>
 142:	8f ec       	ldi	r24, 0xCF	; 207
 144:	97 e0       	ldi	r25, 0x07	; 7
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <WriteIns+0xb4>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <WriteIns+0xba>
 14c:	00 00       	nop
 14e:	cf 91       	pop	r28
 150:	08 95       	ret

00000152 <WriteData>:
 152:	cf 93       	push	r28
 154:	c8 2f       	mov	r28, r24
 156:	61 e0       	ldi	r22, 0x01	; 1
 158:	89 e0       	ldi	r24, 0x09	; 9
 15a:	0e 94 bd 03 	call	0x77a	; 0x77a <DIO_WritePin>
 15e:	6c 2f       	mov	r22, r28
 160:	66 1f       	adc	r22, r22
 162:	66 27       	eor	r22, r22
 164:	66 1f       	adc	r22, r22
 166:	87 e0       	ldi	r24, 0x07	; 7
 168:	0e 94 bd 03 	call	0x77a	; 0x77a <DIO_WritePin>
 16c:	c6 fb       	bst	r28, 6
 16e:	66 27       	eor	r22, r22
 170:	60 f9       	bld	r22, 0
 172:	86 e0       	ldi	r24, 0x06	; 6
 174:	0e 94 bd 03 	call	0x77a	; 0x77a <DIO_WritePin>
 178:	c5 fb       	bst	r28, 5
 17a:	66 27       	eor	r22, r22
 17c:	60 f9       	bld	r22, 0
 17e:	85 e0       	ldi	r24, 0x05	; 5
 180:	0e 94 bd 03 	call	0x77a	; 0x77a <DIO_WritePin>
 184:	c4 fb       	bst	r28, 4
 186:	66 27       	eor	r22, r22
 188:	60 f9       	bld	r22, 0
 18a:	84 e0       	ldi	r24, 0x04	; 4
 18c:	0e 94 bd 03 	call	0x77a	; 0x77a <DIO_WritePin>
 190:	61 e0       	ldi	r22, 0x01	; 1
 192:	88 e0       	ldi	r24, 0x08	; 8
 194:	0e 94 bd 03 	call	0x77a	; 0x77a <DIO_WritePin>
 198:	8f ec       	ldi	r24, 0xCF	; 207
 19a:	97 e0       	ldi	r25, 0x07	; 7
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <WriteData+0x4a>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <WriteData+0x50>
 1a2:	00 00       	nop
 1a4:	60 e0       	ldi	r22, 0x00	; 0
 1a6:	88 e0       	ldi	r24, 0x08	; 8
 1a8:	0e 94 bd 03 	call	0x77a	; 0x77a <DIO_WritePin>
 1ac:	8f ec       	ldi	r24, 0xCF	; 207
 1ae:	97 e0       	ldi	r25, 0x07	; 7
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <WriteData+0x5e>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <WriteData+0x64>
 1b6:	00 00       	nop
 1b8:	c3 fb       	bst	r28, 3
 1ba:	66 27       	eor	r22, r22
 1bc:	60 f9       	bld	r22, 0
 1be:	87 e0       	ldi	r24, 0x07	; 7
 1c0:	0e 94 bd 03 	call	0x77a	; 0x77a <DIO_WritePin>
 1c4:	c2 fb       	bst	r28, 2
 1c6:	66 27       	eor	r22, r22
 1c8:	60 f9       	bld	r22, 0
 1ca:	86 e0       	ldi	r24, 0x06	; 6
 1cc:	0e 94 bd 03 	call	0x77a	; 0x77a <DIO_WritePin>
 1d0:	c1 fb       	bst	r28, 1
 1d2:	66 27       	eor	r22, r22
 1d4:	60 f9       	bld	r22, 0
 1d6:	85 e0       	ldi	r24, 0x05	; 5
 1d8:	0e 94 bd 03 	call	0x77a	; 0x77a <DIO_WritePin>
 1dc:	6c 2f       	mov	r22, r28
 1de:	61 70       	andi	r22, 0x01	; 1
 1e0:	84 e0       	ldi	r24, 0x04	; 4
 1e2:	0e 94 bd 03 	call	0x77a	; 0x77a <DIO_WritePin>
 1e6:	61 e0       	ldi	r22, 0x01	; 1
 1e8:	88 e0       	ldi	r24, 0x08	; 8
 1ea:	0e 94 bd 03 	call	0x77a	; 0x77a <DIO_WritePin>
 1ee:	8f ec       	ldi	r24, 0xCF	; 207
 1f0:	97 e0       	ldi	r25, 0x07	; 7
 1f2:	01 97       	sbiw	r24, 0x01	; 1
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <WriteData+0xa0>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <WriteData+0xa6>
 1f8:	00 00       	nop
 1fa:	60 e0       	ldi	r22, 0x00	; 0
 1fc:	88 e0       	ldi	r24, 0x08	; 8
 1fe:	0e 94 bd 03 	call	0x77a	; 0x77a <DIO_WritePin>
 202:	8f ec       	ldi	r24, 0xCF	; 207
 204:	97 e0       	ldi	r25, 0x07	; 7
 206:	01 97       	sbiw	r24, 0x01	; 1
 208:	f1 f7       	brne	.-4      	; 0x206 <WriteData+0xb4>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <WriteData+0xba>
 20c:	00 00       	nop
 20e:	cf 91       	pop	r28
 210:	08 95       	ret

00000212 <LCD_Init>:
 212:	2f e7       	ldi	r18, 0x7F	; 127
 214:	88 e3       	ldi	r24, 0x38	; 56
 216:	91 e0       	ldi	r25, 0x01	; 1
 218:	21 50       	subi	r18, 0x01	; 1
 21a:	80 40       	sbci	r24, 0x00	; 0
 21c:	90 40       	sbci	r25, 0x00	; 0
 21e:	e1 f7       	brne	.-8      	; 0x218 <LCD_Init+0x6>
 220:	00 c0       	rjmp	.+0      	; 0x222 <LCD_Init+0x10>
 222:	00 00       	nop
 224:	82 e0       	ldi	r24, 0x02	; 2
 226:	0e 94 49 00 	call	0x92	; 0x92 <WriteIns>
 22a:	88 e2       	ldi	r24, 0x28	; 40
 22c:	0e 94 49 00 	call	0x92	; 0x92 <WriteIns>
 230:	8c e0       	ldi	r24, 0x0C	; 12
 232:	0e 94 49 00 	call	0x92	; 0x92 <WriteIns>
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	0e 94 49 00 	call	0x92	; 0x92 <WriteIns>
 23c:	8f ec       	ldi	r24, 0xCF	; 207
 23e:	97 e0       	ldi	r25, 0x07	; 7
 240:	01 97       	sbiw	r24, 0x01	; 1
 242:	f1 f7       	brne	.-4      	; 0x240 <LCD_Init+0x2e>
 244:	00 c0       	rjmp	.+0      	; 0x246 <LCD_Init+0x34>
 246:	00 00       	nop
 248:	86 e0       	ldi	r24, 0x06	; 6
 24a:	0e 94 49 00 	call	0x92	; 0x92 <WriteIns>
 24e:	08 95       	ret

00000250 <LCD_GoTo>:
 250:	81 11       	cpse	r24, r1
 252:	05 c0       	rjmp	.+10     	; 0x25e <LCD_GoTo+0xe>
 254:	80 e8       	ldi	r24, 0x80	; 128
 256:	86 0f       	add	r24, r22
 258:	0e 94 49 00 	call	0x92	; 0x92 <WriteIns>
 25c:	08 95       	ret
 25e:	81 30       	cpi	r24, 0x01	; 1
 260:	21 f4       	brne	.+8      	; 0x26a <LCD_GoTo+0x1a>
 262:	80 ec       	ldi	r24, 0xC0	; 192
 264:	86 0f       	add	r24, r22
 266:	0e 94 49 00 	call	0x92	; 0x92 <WriteIns>
 26a:	08 95       	ret

0000026c <LCD_WriteChar>:
	_delay_ms(1);
}

void LCD_WriteChar(u8 ch)
{
	WriteData(ch);
 26c:	0e 94 a9 00 	call	0x152	; 0x152 <WriteData>
 270:	08 95       	ret

00000272 <LCD_WriteString>:
}

void LCD_WriteString(u8 *str)
{
 272:	0f 93       	push	r16
 274:	1f 93       	push	r17
 276:	cf 93       	push	r28
 278:	8c 01       	movw	r16, r24
	s8 i;
	for (i=0;str[i];i++)
 27a:	c0 e0       	ldi	r28, 0x00	; 0
 27c:	03 c0       	rjmp	.+6      	; 0x284 <LCD_WriteString+0x12>
	{
		LCD_WriteChar(str[i]);
 27e:	0e 94 36 01 	call	0x26c	; 0x26c <LCD_WriteChar>
}

void LCD_WriteString(u8 *str)
{
	s8 i;
	for (i=0;str[i];i++)
 282:	cf 5f       	subi	r28, 0xFF	; 255
 284:	f8 01       	movw	r30, r16
 286:	ec 0f       	add	r30, r28
 288:	f1 1d       	adc	r31, r1
 28a:	c7 fd       	sbrc	r28, 7
 28c:	fa 95       	dec	r31
 28e:	80 81       	ld	r24, Z
 290:	81 11       	cpse	r24, r1
 292:	f5 cf       	rjmp	.-22     	; 0x27e <LCD_WriteString+0xc>
	{
		LCD_WriteChar(str[i]);
	}
	
}
 294:	cf 91       	pop	r28
 296:	1f 91       	pop	r17
 298:	0f 91       	pop	r16
 29a:	08 95       	ret

0000029c <LCD_WriteNumber>:

void LCD_WriteNumber(s32 num) //125
{
 29c:	cf 92       	push	r12
 29e:	df 92       	push	r13
 2a0:	ef 92       	push	r14
 2a2:	ff 92       	push	r15
 2a4:	1f 93       	push	r17
 2a6:	cf 93       	push	r28
 2a8:	df 93       	push	r29
 2aa:	cd b7       	in	r28, 0x3d	; 61
 2ac:	de b7       	in	r29, 0x3e	; 62
 2ae:	64 97       	sbiw	r28, 0x14	; 20
 2b0:	0f b6       	in	r0, 0x3f	; 63
 2b2:	f8 94       	cli
 2b4:	de bf       	out	0x3e, r29	; 62
 2b6:	0f be       	out	0x3f, r0	; 63
 2b8:	cd bf       	out	0x3d, r28	; 61
 2ba:	6b 01       	movw	r12, r22
 2bc:	7c 01       	movw	r14, r24
	u8 str[20];
	u8 i=0;
	s8 j;
	if (num==0)
 2be:	61 15       	cp	r22, r1
 2c0:	71 05       	cpc	r23, r1
 2c2:	81 05       	cpc	r24, r1
 2c4:	91 05       	cpc	r25, r1
 2c6:	21 f4       	brne	.+8      	; 0x2d0 <LCD_WriteNumber+0x34>
	{
		LCD_WriteChar('0');
 2c8:	80 e3       	ldi	r24, 0x30	; 48
 2ca:	0e 94 36 01 	call	0x26c	; 0x26c <LCD_WriteChar>
 2ce:	3b c0       	rjmp	.+118    	; 0x346 <LCD_WriteNumber+0xaa>
		return ;
	}
	if (num<0)
 2d0:	99 23       	and	r25, r25
 2d2:	5c f4       	brge	.+22     	; 0x2ea <LCD_WriteNumber+0x4e>
	{
		LCD_WriteChar('-');
 2d4:	8d e2       	ldi	r24, 0x2D	; 45
 2d6:	0e 94 36 01 	call	0x26c	; 0x26c <LCD_WriteChar>
		num=num*(-1);
 2da:	f0 94       	com	r15
 2dc:	e0 94       	com	r14
 2de:	d0 94       	com	r13
 2e0:	c0 94       	com	r12
 2e2:	c1 1c       	adc	r12, r1
 2e4:	d1 1c       	adc	r13, r1
 2e6:	e1 1c       	adc	r14, r1
 2e8:	f1 1c       	adc	r15, r1
	}
	
}

void LCD_WriteNumber(s32 num) //125
{
 2ea:	10 e0       	ldi	r17, 0x00	; 0
 2ec:	15 c0       	rjmp	.+42     	; 0x318 <LCD_WriteNumber+0x7c>
		num=num*(-1);
	}
	
	while(num)
	{
		str[i]=num%10 +'0';
 2ee:	c7 01       	movw	r24, r14
 2f0:	b6 01       	movw	r22, r12
 2f2:	2a e0       	ldi	r18, 0x0A	; 10
 2f4:	30 e0       	ldi	r19, 0x00	; 0
 2f6:	40 e0       	ldi	r20, 0x00	; 0
 2f8:	50 e0       	ldi	r21, 0x00	; 0
 2fa:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <__divmodsi4>
 2fe:	e1 e0       	ldi	r30, 0x01	; 1
 300:	f0 e0       	ldi	r31, 0x00	; 0
 302:	ec 0f       	add	r30, r28
 304:	fd 1f       	adc	r31, r29
 306:	e1 0f       	add	r30, r17
 308:	f1 1d       	adc	r31, r1
 30a:	60 5d       	subi	r22, 0xD0	; 208
 30c:	60 83       	st	Z, r22
		i++;
 30e:	1f 5f       	subi	r17, 0xFF	; 255
		num=num/10;
 310:	c2 2e       	mov	r12, r18
 312:	d3 2e       	mov	r13, r19
 314:	e4 2e       	mov	r14, r20
 316:	f5 2e       	mov	r15, r21
	{
		LCD_WriteChar('-');
		num=num*(-1);
	}
	
	while(num)
 318:	c1 14       	cp	r12, r1
 31a:	d1 04       	cpc	r13, r1
 31c:	e1 04       	cpc	r14, r1
 31e:	f1 04       	cpc	r15, r1
 320:	31 f7       	brne	.-52     	; 0x2ee <LCD_WriteNumber+0x52>
		str[i]=num%10 +'0';
		i++;
		num=num/10;
	}
	
	for (j=i-1;j>=0;j--)
 322:	ff 24       	eor	r15, r15
 324:	fa 94       	dec	r15
 326:	f1 0e       	add	r15, r17
 328:	0c c0       	rjmp	.+24     	; 0x342 <LCD_WriteNumber+0xa6>
	{
		LCD_WriteChar(str[j]);
 32a:	e1 e0       	ldi	r30, 0x01	; 1
 32c:	f0 e0       	ldi	r31, 0x00	; 0
 32e:	ec 0f       	add	r30, r28
 330:	fd 1f       	adc	r31, r29
 332:	ef 0d       	add	r30, r15
 334:	f1 1d       	adc	r31, r1
 336:	f7 fc       	sbrc	r15, 7
 338:	fa 95       	dec	r31
 33a:	80 81       	ld	r24, Z
 33c:	0e 94 36 01 	call	0x26c	; 0x26c <LCD_WriteChar>
		str[i]=num%10 +'0';
		i++;
		num=num/10;
	}
	
	for (j=i-1;j>=0;j--)
 340:	fa 94       	dec	r15
 342:	ff 20       	and	r15, r15
 344:	94 f7       	brge	.-28     	; 0x32a <LCD_WriteNumber+0x8e>
	{
		LCD_WriteChar(str[j]);
	}
	//LCD_WriteString(str);
}
 346:	64 96       	adiw	r28, 0x14	; 20
 348:	0f b6       	in	r0, 0x3f	; 63
 34a:	f8 94       	cli
 34c:	de bf       	out	0x3e, r29	; 62
 34e:	0f be       	out	0x3f, r0	; 63
 350:	cd bf       	out	0x3d, r28	; 61
 352:	df 91       	pop	r29
 354:	cf 91       	pop	r28
 356:	1f 91       	pop	r17
 358:	ff 90       	pop	r15
 35a:	ef 90       	pop	r14
 35c:	df 90       	pop	r13
 35e:	cf 90       	pop	r12
 360:	08 95       	ret

00000362 <main>:

u8 Temp_Rec = 0x00;

int main(void)
{
	DIO_init();
 362:	0e 94 75 03 	call	0x6ea	; 0x6ea <DIO_init>
	LCD_Init();
 366:	0e 94 09 01 	call	0x212	; 0x212 <LCD_Init>
	sei();
 36a:	78 94       	sei
	EX_INT0_INIT(Rising_Edge);
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	0e 94 44 04 	call	0x888	; 0x888 <EX_INT0_INIT>
	//UART_Init();
	SPI_Init();
 372:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <SPI_Init>
	
	u8 data_recieve =0XAA;
	//u8 data_send =0;
	u8 Temp_Rec = 0xAA;
	
	DIO_InitPin(PINA0,INPULL);
 376:	63 e0       	ldi	r22, 0x03	; 3
 378:	80 e0       	ldi	r24, 0x00	; 0
 37a:	0e 94 29 02 	call	0x452	; 0x452 <DIO_InitPin>
	DIO_InitPin(PIND2,INFREE);
 37e:	62 e0       	ldi	r22, 0x02	; 2
 380:	8a e1       	ldi	r24, 0x1A	; 26
 382:	0e 94 29 02 	call	0x452	; 0x452 <DIO_InitPin>
	
	LCD_GoTo(0,0);
 386:	60 e0       	ldi	r22, 0x00	; 0
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	0e 94 28 01 	call	0x250	; 0x250 <LCD_GoTo>
	LCD_WriteString("MASTER::");
 38e:	80 e6       	ldi	r24, 0x60	; 96
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	0e 94 39 01 	call	0x272	; 0x272 <LCD_WriteString>
	Temp_Rec = SPI_Send_Recieve(0x55);
 396:	85 e5       	ldi	r24, 0x55	; 85
 398:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <SPI_Send_Recieve>
 39c:	c8 2f       	mov	r28, r24
	LCD_GoTo(1,0);
 39e:	60 e0       	ldi	r22, 0x00	; 0
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	0e 94 28 01 	call	0x250	; 0x250 <LCD_GoTo>
	LCD_WriteNumber(Temp_Rec);
 3a6:	6c 2f       	mov	r22, r28
 3a8:	70 e0       	ldi	r23, 0x00	; 0
 3aa:	80 e0       	ldi	r24, 0x00	; 0
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	0e 94 4e 01 	call	0x29c	; 0x29c <LCD_WriteNumber>
		_delay_ms(500);
		*/
		
		/************** APPLICATION 2 ***************/
		
		if(DIO_ReadPin(PINA0)==0)
 3b2:	80 e0       	ldi	r24, 0x00	; 0
 3b4:	0e 94 85 03 	call	0x70a	; 0x70a <DIO_ReadPin>
 3b8:	81 11       	cpse	r24, r1
 3ba:	08 c0       	rjmp	.+16     	; 0x3cc <main+0x6a>
		{
			DIO_InitPin(PINB4,OUTPUT_L);
 3bc:	61 e0       	ldi	r22, 0x01	; 1
 3be:	8c e0       	ldi	r24, 0x0C	; 12
 3c0:	0e 94 29 02 	call	0x452	; 0x452 <DIO_InitPin>
			Temp_Rec = 	SPI_Send_Recieve(0x55);
 3c4:	85 e5       	ldi	r24, 0x55	; 85
 3c6:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <SPI_Send_Recieve>
 3ca:	c8 2f       	mov	r28, r24
		}
		DIO_InitPin(PINB4,OUTPUT_H);
 3cc:	60 e0       	ldi	r22, 0x00	; 0
 3ce:	8c e0       	ldi	r24, 0x0C	; 12
 3d0:	0e 94 29 02 	call	0x452	; 0x452 <DIO_InitPin>
		LCD_GoTo(1,0);
 3d4:	60 e0       	ldi	r22, 0x00	; 0
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	0e 94 28 01 	call	0x250	; 0x250 <LCD_GoTo>
		LCD_WriteNumber(Temp_Rec);
 3dc:	6c 2f       	mov	r22, r28
 3de:	70 e0       	ldi	r23, 0x00	; 0
 3e0:	80 e0       	ldi	r24, 0x00	; 0
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	0e 94 4e 01 	call	0x29c	; 0x29c <LCD_WriteNumber>
		
		if(DIO_ReadPin(PIND2)==1)
 3e8:	8a e1       	ldi	r24, 0x1A	; 26
 3ea:	0e 94 85 03 	call	0x70a	; 0x70a <DIO_ReadPin>
 3ee:	81 30       	cpi	r24, 0x01	; 1
 3f0:	01 f7       	brne	.-64     	; 0x3b2 <main+0x50>
			Temp_Rec = 	SPI_Send_Recieve(0x55);
 3f2:	85 e5       	ldi	r24, 0x55	; 85
 3f4:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <SPI_Send_Recieve>
 3f8:	c8 2f       	mov	r28, r24
 3fa:	db cf       	rjmp	.-74     	; 0x3b2 <main+0x50>

000003fc <__vector_1>:
	}
}


ISR(INT0_vect)
{
 3fc:	1f 92       	push	r1
 3fe:	0f 92       	push	r0
 400:	0f b6       	in	r0, 0x3f	; 63
 402:	0f 92       	push	r0
 404:	11 24       	eor	r1, r1
 406:	2f 93       	push	r18
 408:	3f 93       	push	r19
 40a:	4f 93       	push	r20
 40c:	5f 93       	push	r21
 40e:	6f 93       	push	r22
 410:	7f 93       	push	r23
 412:	8f 93       	push	r24
 414:	9f 93       	push	r25
 416:	af 93       	push	r26
 418:	bf 93       	push	r27
 41a:	ef 93       	push	r30
 41c:	ff 93       	push	r31
	DIO_InitPin(PINB4,OUTPUT_L);
 41e:	61 e0       	ldi	r22, 0x01	; 1
 420:	8c e0       	ldi	r24, 0x0C	; 12
 422:	0e 94 29 02 	call	0x452	; 0x452 <DIO_InitPin>
	Temp_Rec = 	SPI_Send_Recieve(0);
 426:	80 e0       	ldi	r24, 0x00	; 0
 428:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <SPI_Send_Recieve>
 42c:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__data_end>
}
 430:	ff 91       	pop	r31
 432:	ef 91       	pop	r30
 434:	bf 91       	pop	r27
 436:	af 91       	pop	r26
 438:	9f 91       	pop	r25
 43a:	8f 91       	pop	r24
 43c:	7f 91       	pop	r23
 43e:	6f 91       	pop	r22
 440:	5f 91       	pop	r21
 442:	4f 91       	pop	r20
 444:	3f 91       	pop	r19
 446:	2f 91       	pop	r18
 448:	0f 90       	pop	r0
 44a:	0f be       	out	0x3f, r0	; 63
 44c:	0f 90       	pop	r0
 44e:	1f 90       	pop	r1
 450:	18 95       	reti

00000452 <DIO_InitPin>:
};	


void DIO_InitPin(DIO_Pin_type pin_num, DIO_PinStatus_type status) //pin_num = 25. 
{
	DIO_Port_type port = pin_num/8;
 452:	98 2f       	mov	r25, r24
 454:	96 95       	lsr	r25
 456:	96 95       	lsr	r25
 458:	96 95       	lsr	r25
	pin_num = pin_num%8;
 45a:	87 70       	andi	r24, 0x07	; 7
	
	switch (status)
 45c:	61 30       	cpi	r22, 0x01	; 1
 45e:	49 f0       	breq	.+18     	; 0x472 <DIO_InitPin+0x20>
 460:	08 f4       	brcc	.+2      	; 0x464 <DIO_InitPin+0x12>
 462:	57 c0       	rjmp	.+174    	; 0x512 <DIO_InitPin+0xc0>
 464:	62 30       	cpi	r22, 0x02	; 2
 466:	09 f4       	brne	.+2      	; 0x46a <DIO_InitPin+0x18>
 468:	a0 c0       	rjmp	.+320    	; 0x5aa <DIO_InitPin+0x158>
 46a:	63 30       	cpi	r22, 0x03	; 3
 46c:	09 f4       	brne	.+2      	; 0x470 <DIO_InitPin+0x1e>
 46e:	ed c0       	rjmp	.+474    	; 0x64a <DIO_InitPin+0x1f8>
 470:	08 95       	ret
	{
	case OUTPUT_L:
		switch(port)
 472:	91 30       	cpi	r25, 0x01	; 1
 474:	c1 f0       	breq	.+48     	; 0x4a6 <DIO_InitPin+0x54>
 476:	28 f0       	brcs	.+10     	; 0x482 <DIO_InitPin+0x30>
 478:	92 30       	cpi	r25, 0x02	; 2
 47a:	39 f1       	breq	.+78     	; 0x4ca <DIO_InitPin+0x78>
 47c:	93 30       	cpi	r25, 0x03	; 3
 47e:	b9 f1       	breq	.+110    	; 0x4ee <DIO_InitPin+0x9c>
 480:	08 95       	ret
		{
			case PA:
			CLR_BIT(PORTA,pin_num);
 482:	4b b3       	in	r20, 0x1b	; 27
 484:	21 e0       	ldi	r18, 0x01	; 1
 486:	30 e0       	ldi	r19, 0x00	; 0
 488:	b9 01       	movw	r22, r18
 48a:	02 c0       	rjmp	.+4      	; 0x490 <DIO_InitPin+0x3e>
 48c:	66 0f       	add	r22, r22
 48e:	77 1f       	adc	r23, r23
 490:	8a 95       	dec	r24
 492:	e2 f7       	brpl	.-8      	; 0x48c <DIO_InitPin+0x3a>
 494:	cb 01       	movw	r24, r22
 496:	96 2f       	mov	r25, r22
 498:	90 95       	com	r25
 49a:	94 23       	and	r25, r20
 49c:	9b bb       	out	0x1b, r25	; 27
			SET_BIT(DDRA,pin_num);
 49e:	9a b3       	in	r25, 0x1a	; 26
 4a0:	89 2b       	or	r24, r25
 4a2:	8a bb       	out	0x1a, r24	; 26
			break;
 4a4:	08 95       	ret
				
			case PB:
			CLR_BIT(PORTB,pin_num);
 4a6:	48 b3       	in	r20, 0x18	; 24
 4a8:	21 e0       	ldi	r18, 0x01	; 1
 4aa:	30 e0       	ldi	r19, 0x00	; 0
 4ac:	b9 01       	movw	r22, r18
 4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <DIO_InitPin+0x62>
 4b0:	66 0f       	add	r22, r22
 4b2:	77 1f       	adc	r23, r23
 4b4:	8a 95       	dec	r24
 4b6:	e2 f7       	brpl	.-8      	; 0x4b0 <DIO_InitPin+0x5e>
 4b8:	cb 01       	movw	r24, r22
 4ba:	96 2f       	mov	r25, r22
 4bc:	90 95       	com	r25
 4be:	94 23       	and	r25, r20
 4c0:	98 bb       	out	0x18, r25	; 24
			SET_BIT(DDRB,pin_num);
 4c2:	97 b3       	in	r25, 0x17	; 23
 4c4:	89 2b       	or	r24, r25
 4c6:	87 bb       	out	0x17, r24	; 23
			break;
 4c8:	08 95       	ret
			
			case PC:
			CLR_BIT(PORTC,pin_num);
 4ca:	45 b3       	in	r20, 0x15	; 21
 4cc:	21 e0       	ldi	r18, 0x01	; 1
 4ce:	30 e0       	ldi	r19, 0x00	; 0
 4d0:	b9 01       	movw	r22, r18
 4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <DIO_InitPin+0x86>
 4d4:	66 0f       	add	r22, r22
 4d6:	77 1f       	adc	r23, r23
 4d8:	8a 95       	dec	r24
 4da:	e2 f7       	brpl	.-8      	; 0x4d4 <DIO_InitPin+0x82>
 4dc:	cb 01       	movw	r24, r22
 4de:	96 2f       	mov	r25, r22
 4e0:	90 95       	com	r25
 4e2:	94 23       	and	r25, r20
 4e4:	95 bb       	out	0x15, r25	; 21
			SET_BIT(DDRC,pin_num);
 4e6:	94 b3       	in	r25, 0x14	; 20
 4e8:	89 2b       	or	r24, r25
 4ea:	84 bb       	out	0x14, r24	; 20
			break;
 4ec:	08 95       	ret
			
			case PD:
			CLR_BIT(PORTD,pin_num);
 4ee:	42 b3       	in	r20, 0x12	; 18
 4f0:	21 e0       	ldi	r18, 0x01	; 1
 4f2:	30 e0       	ldi	r19, 0x00	; 0
 4f4:	b9 01       	movw	r22, r18
 4f6:	02 c0       	rjmp	.+4      	; 0x4fc <DIO_InitPin+0xaa>
 4f8:	66 0f       	add	r22, r22
 4fa:	77 1f       	adc	r23, r23
 4fc:	8a 95       	dec	r24
 4fe:	e2 f7       	brpl	.-8      	; 0x4f8 <DIO_InitPin+0xa6>
 500:	cb 01       	movw	r24, r22
 502:	96 2f       	mov	r25, r22
 504:	90 95       	com	r25
 506:	94 23       	and	r25, r20
 508:	92 bb       	out	0x12, r25	; 18
			SET_BIT(DDRD,pin_num);
 50a:	91 b3       	in	r25, 0x11	; 17
 50c:	89 2b       	or	r24, r25
 50e:	81 bb       	out	0x11, r24	; 17
			break;	
 510:	08 95       	ret
		}
		break;
		
		case OUTPUT_H:
		switch(port)
 512:	91 30       	cpi	r25, 0x01	; 1
 514:	b9 f0       	breq	.+46     	; 0x544 <DIO_InitPin+0xf2>
 516:	28 f0       	brcs	.+10     	; 0x522 <DIO_InitPin+0xd0>
 518:	92 30       	cpi	r25, 0x02	; 2
 51a:	29 f1       	breq	.+74     	; 0x566 <DIO_InitPin+0x114>
 51c:	93 30       	cpi	r25, 0x03	; 3
 51e:	a1 f1       	breq	.+104    	; 0x588 <DIO_InitPin+0x136>
 520:	08 95       	ret
		{
			case PA:
			SET_BIT(PORTA,pin_num);
 522:	4b b3       	in	r20, 0x1b	; 27
 524:	21 e0       	ldi	r18, 0x01	; 1
 526:	30 e0       	ldi	r19, 0x00	; 0
 528:	b9 01       	movw	r22, r18
 52a:	02 c0       	rjmp	.+4      	; 0x530 <DIO_InitPin+0xde>
 52c:	66 0f       	add	r22, r22
 52e:	77 1f       	adc	r23, r23
 530:	8a 95       	dec	r24
 532:	e2 f7       	brpl	.-8      	; 0x52c <DIO_InitPin+0xda>
 534:	cb 01       	movw	r24, r22
 536:	94 2f       	mov	r25, r20
 538:	98 2b       	or	r25, r24
 53a:	9b bb       	out	0x1b, r25	; 27
			SET_BIT(DDRA,pin_num);
 53c:	9a b3       	in	r25, 0x1a	; 26
 53e:	89 2b       	or	r24, r25
 540:	8a bb       	out	0x1a, r24	; 26
			break;
 542:	08 95       	ret
			
			case PB:
			SET_BIT(PORTB,pin_num);
 544:	48 b3       	in	r20, 0x18	; 24
 546:	21 e0       	ldi	r18, 0x01	; 1
 548:	30 e0       	ldi	r19, 0x00	; 0
 54a:	b9 01       	movw	r22, r18
 54c:	02 c0       	rjmp	.+4      	; 0x552 <DIO_InitPin+0x100>
 54e:	66 0f       	add	r22, r22
 550:	77 1f       	adc	r23, r23
 552:	8a 95       	dec	r24
 554:	e2 f7       	brpl	.-8      	; 0x54e <DIO_InitPin+0xfc>
 556:	cb 01       	movw	r24, r22
 558:	94 2f       	mov	r25, r20
 55a:	98 2b       	or	r25, r24
 55c:	98 bb       	out	0x18, r25	; 24
			SET_BIT(DDRB,pin_num);
 55e:	97 b3       	in	r25, 0x17	; 23
 560:	89 2b       	or	r24, r25
 562:	87 bb       	out	0x17, r24	; 23
			break;
 564:	08 95       	ret
			
			case PC:
			SET_BIT(PORTC,pin_num);
 566:	45 b3       	in	r20, 0x15	; 21
 568:	21 e0       	ldi	r18, 0x01	; 1
 56a:	30 e0       	ldi	r19, 0x00	; 0
 56c:	b9 01       	movw	r22, r18
 56e:	02 c0       	rjmp	.+4      	; 0x574 <DIO_InitPin+0x122>
 570:	66 0f       	add	r22, r22
 572:	77 1f       	adc	r23, r23
 574:	8a 95       	dec	r24
 576:	e2 f7       	brpl	.-8      	; 0x570 <DIO_InitPin+0x11e>
 578:	cb 01       	movw	r24, r22
 57a:	94 2f       	mov	r25, r20
 57c:	98 2b       	or	r25, r24
 57e:	95 bb       	out	0x15, r25	; 21
			SET_BIT(DDRC,pin_num);
 580:	94 b3       	in	r25, 0x14	; 20
 582:	89 2b       	or	r24, r25
 584:	84 bb       	out	0x14, r24	; 20
			break;
 586:	08 95       	ret
			
			case PD:
			SET_BIT(PORTD,pin_num);
 588:	42 b3       	in	r20, 0x12	; 18
 58a:	21 e0       	ldi	r18, 0x01	; 1
 58c:	30 e0       	ldi	r19, 0x00	; 0
 58e:	b9 01       	movw	r22, r18
 590:	02 c0       	rjmp	.+4      	; 0x596 <DIO_InitPin+0x144>
 592:	66 0f       	add	r22, r22
 594:	77 1f       	adc	r23, r23
 596:	8a 95       	dec	r24
 598:	e2 f7       	brpl	.-8      	; 0x592 <DIO_InitPin+0x140>
 59a:	cb 01       	movw	r24, r22
 59c:	94 2f       	mov	r25, r20
 59e:	98 2b       	or	r25, r24
 5a0:	92 bb       	out	0x12, r25	; 18
			SET_BIT(DDRD,pin_num);
 5a2:	91 b3       	in	r25, 0x11	; 17
 5a4:	89 2b       	or	r24, r25
 5a6:	81 bb       	out	0x11, r24	; 17
			break;
 5a8:	08 95       	ret
		}
		break;
		
		
		case INFREE:
			switch(port)
 5aa:	91 30       	cpi	r25, 0x01	; 1
 5ac:	c1 f0       	breq	.+48     	; 0x5de <DIO_InitPin+0x18c>
 5ae:	28 f0       	brcs	.+10     	; 0x5ba <DIO_InitPin+0x168>
 5b0:	92 30       	cpi	r25, 0x02	; 2
 5b2:	39 f1       	breq	.+78     	; 0x602 <DIO_InitPin+0x1b0>
 5b4:	93 30       	cpi	r25, 0x03	; 3
 5b6:	b9 f1       	breq	.+110    	; 0x626 <DIO_InitPin+0x1d4>
 5b8:	08 95       	ret
			{
				case PA:
				CLR_BIT(PORTA,pin_num);
 5ba:	4b b3       	in	r20, 0x1b	; 27
 5bc:	21 e0       	ldi	r18, 0x01	; 1
 5be:	30 e0       	ldi	r19, 0x00	; 0
 5c0:	b9 01       	movw	r22, r18
 5c2:	02 c0       	rjmp	.+4      	; 0x5c8 <DIO_InitPin+0x176>
 5c4:	66 0f       	add	r22, r22
 5c6:	77 1f       	adc	r23, r23
 5c8:	8a 95       	dec	r24
 5ca:	e2 f7       	brpl	.-8      	; 0x5c4 <DIO_InitPin+0x172>
 5cc:	cb 01       	movw	r24, r22
 5ce:	80 95       	com	r24
 5d0:	94 2f       	mov	r25, r20
 5d2:	98 23       	and	r25, r24
 5d4:	9b bb       	out	0x1b, r25	; 27
				CLR_BIT(DDRA,pin_num);
 5d6:	9a b3       	in	r25, 0x1a	; 26
 5d8:	89 23       	and	r24, r25
 5da:	8a bb       	out	0x1a, r24	; 26
				break;
 5dc:	08 95       	ret
				
				case PB:
				CLR_BIT(PORTB,pin_num);
 5de:	48 b3       	in	r20, 0x18	; 24
 5e0:	21 e0       	ldi	r18, 0x01	; 1
 5e2:	30 e0       	ldi	r19, 0x00	; 0
 5e4:	b9 01       	movw	r22, r18
 5e6:	02 c0       	rjmp	.+4      	; 0x5ec <DIO_InitPin+0x19a>
 5e8:	66 0f       	add	r22, r22
 5ea:	77 1f       	adc	r23, r23
 5ec:	8a 95       	dec	r24
 5ee:	e2 f7       	brpl	.-8      	; 0x5e8 <DIO_InitPin+0x196>
 5f0:	cb 01       	movw	r24, r22
 5f2:	80 95       	com	r24
 5f4:	94 2f       	mov	r25, r20
 5f6:	98 23       	and	r25, r24
 5f8:	98 bb       	out	0x18, r25	; 24
				CLR_BIT(DDRB,pin_num);
 5fa:	97 b3       	in	r25, 0x17	; 23
 5fc:	89 23       	and	r24, r25
 5fe:	87 bb       	out	0x17, r24	; 23
				break;
 600:	08 95       	ret
				
				case PC:
				CLR_BIT(PORTC,pin_num);
 602:	45 b3       	in	r20, 0x15	; 21
 604:	21 e0       	ldi	r18, 0x01	; 1
 606:	30 e0       	ldi	r19, 0x00	; 0
 608:	b9 01       	movw	r22, r18
 60a:	02 c0       	rjmp	.+4      	; 0x610 <DIO_InitPin+0x1be>
 60c:	66 0f       	add	r22, r22
 60e:	77 1f       	adc	r23, r23
 610:	8a 95       	dec	r24
 612:	e2 f7       	brpl	.-8      	; 0x60c <DIO_InitPin+0x1ba>
 614:	cb 01       	movw	r24, r22
 616:	80 95       	com	r24
 618:	94 2f       	mov	r25, r20
 61a:	98 23       	and	r25, r24
 61c:	95 bb       	out	0x15, r25	; 21
				CLR_BIT(DDRC,pin_num);
 61e:	94 b3       	in	r25, 0x14	; 20
 620:	89 23       	and	r24, r25
 622:	84 bb       	out	0x14, r24	; 20
				break;
 624:	08 95       	ret
				
				case PD:
				CLR_BIT(PORTD,pin_num);
 626:	42 b3       	in	r20, 0x12	; 18
 628:	21 e0       	ldi	r18, 0x01	; 1
 62a:	30 e0       	ldi	r19, 0x00	; 0
 62c:	b9 01       	movw	r22, r18
 62e:	02 c0       	rjmp	.+4      	; 0x634 <DIO_InitPin+0x1e2>
 630:	66 0f       	add	r22, r22
 632:	77 1f       	adc	r23, r23
 634:	8a 95       	dec	r24
 636:	e2 f7       	brpl	.-8      	; 0x630 <DIO_InitPin+0x1de>
 638:	cb 01       	movw	r24, r22
 63a:	80 95       	com	r24
 63c:	94 2f       	mov	r25, r20
 63e:	98 23       	and	r25, r24
 640:	92 bb       	out	0x12, r25	; 18
				CLR_BIT(DDRD,pin_num);
 642:	91 b3       	in	r25, 0x11	; 17
 644:	89 23       	and	r24, r25
 646:	81 bb       	out	0x11, r24	; 17
				break;
 648:	08 95       	ret
			}
			break;
			
		case INPULL:
			switch(port)
 64a:	91 30       	cpi	r25, 0x01	; 1
 64c:	c1 f0       	breq	.+48     	; 0x67e <DIO_InitPin+0x22c>
 64e:	28 f0       	brcs	.+10     	; 0x65a <DIO_InitPin+0x208>
 650:	92 30       	cpi	r25, 0x02	; 2
 652:	39 f1       	breq	.+78     	; 0x6a2 <DIO_InitPin+0x250>
 654:	93 30       	cpi	r25, 0x03	; 3
 656:	b9 f1       	breq	.+110    	; 0x6c6 <DIO_InitPin+0x274>
 658:	08 95       	ret
			{
				case PA:
				CLR_BIT(DDRA,pin_num);
 65a:	4a b3       	in	r20, 0x1a	; 26
 65c:	21 e0       	ldi	r18, 0x01	; 1
 65e:	30 e0       	ldi	r19, 0x00	; 0
 660:	b9 01       	movw	r22, r18
 662:	02 c0       	rjmp	.+4      	; 0x668 <DIO_InitPin+0x216>
 664:	66 0f       	add	r22, r22
 666:	77 1f       	adc	r23, r23
 668:	8a 95       	dec	r24
 66a:	e2 f7       	brpl	.-8      	; 0x664 <DIO_InitPin+0x212>
 66c:	cb 01       	movw	r24, r22
 66e:	96 2f       	mov	r25, r22
 670:	90 95       	com	r25
 672:	94 23       	and	r25, r20
 674:	9a bb       	out	0x1a, r25	; 26
				SET_BIT(PORTA,pin_num);
 676:	9b b3       	in	r25, 0x1b	; 27
 678:	89 2b       	or	r24, r25
 67a:	8b bb       	out	0x1b, r24	; 27
				break;
 67c:	08 95       	ret
				
				case PB:
				CLR_BIT(DDRB,pin_num);
 67e:	47 b3       	in	r20, 0x17	; 23
 680:	21 e0       	ldi	r18, 0x01	; 1
 682:	30 e0       	ldi	r19, 0x00	; 0
 684:	b9 01       	movw	r22, r18
 686:	02 c0       	rjmp	.+4      	; 0x68c <DIO_InitPin+0x23a>
 688:	66 0f       	add	r22, r22
 68a:	77 1f       	adc	r23, r23
 68c:	8a 95       	dec	r24
 68e:	e2 f7       	brpl	.-8      	; 0x688 <DIO_InitPin+0x236>
 690:	cb 01       	movw	r24, r22
 692:	96 2f       	mov	r25, r22
 694:	90 95       	com	r25
 696:	94 23       	and	r25, r20
 698:	97 bb       	out	0x17, r25	; 23
				SET_BIT(PORTB,pin_num);
 69a:	98 b3       	in	r25, 0x18	; 24
 69c:	89 2b       	or	r24, r25
 69e:	88 bb       	out	0x18, r24	; 24
				break;
 6a0:	08 95       	ret
				
				case PC:
				CLR_BIT(DDRC,pin_num);
 6a2:	44 b3       	in	r20, 0x14	; 20
 6a4:	21 e0       	ldi	r18, 0x01	; 1
 6a6:	30 e0       	ldi	r19, 0x00	; 0
 6a8:	b9 01       	movw	r22, r18
 6aa:	02 c0       	rjmp	.+4      	; 0x6b0 <DIO_InitPin+0x25e>
 6ac:	66 0f       	add	r22, r22
 6ae:	77 1f       	adc	r23, r23
 6b0:	8a 95       	dec	r24
 6b2:	e2 f7       	brpl	.-8      	; 0x6ac <DIO_InitPin+0x25a>
 6b4:	cb 01       	movw	r24, r22
 6b6:	96 2f       	mov	r25, r22
 6b8:	90 95       	com	r25
 6ba:	94 23       	and	r25, r20
 6bc:	94 bb       	out	0x14, r25	; 20
				SET_BIT(PORTC,pin_num);
 6be:	95 b3       	in	r25, 0x15	; 21
 6c0:	89 2b       	or	r24, r25
 6c2:	85 bb       	out	0x15, r24	; 21
				break;
 6c4:	08 95       	ret
				
				case PD:
				CLR_BIT(DDRD,pin_num);
 6c6:	41 b3       	in	r20, 0x11	; 17
 6c8:	21 e0       	ldi	r18, 0x01	; 1
 6ca:	30 e0       	ldi	r19, 0x00	; 0
 6cc:	b9 01       	movw	r22, r18
 6ce:	02 c0       	rjmp	.+4      	; 0x6d4 <DIO_InitPin+0x282>
 6d0:	66 0f       	add	r22, r22
 6d2:	77 1f       	adc	r23, r23
 6d4:	8a 95       	dec	r24
 6d6:	e2 f7       	brpl	.-8      	; 0x6d0 <DIO_InitPin+0x27e>
 6d8:	cb 01       	movw	r24, r22
 6da:	96 2f       	mov	r25, r22
 6dc:	90 95       	com	r25
 6de:	94 23       	and	r25, r20
 6e0:	91 bb       	out	0x11, r25	; 17
				SET_BIT(PORTD,pin_num);
 6e2:	92 b3       	in	r25, 0x12	; 18
 6e4:	89 2b       	or	r24, r25
 6e6:	82 bb       	out	0x12, r24	; 18
 6e8:	08 95       	ret

000006ea <DIO_init>:
	}
}


void DIO_init(void)
{
 6ea:	cf 93       	push	r28
	DIO_Pin_type index=0;
	for(index = 0; index<TOTAL_PINS; index++)
 6ec:	c0 e0       	ldi	r28, 0x00	; 0
 6ee:	09 c0       	rjmp	.+18     	; 0x702 <DIO_init+0x18>
	{
		DIO_InitPin(index, DIO_PinsStatusArr[index]);
 6f0:	ec 2f       	mov	r30, r28
 6f2:	f0 e0       	ldi	r31, 0x00	; 0
 6f4:	e7 59       	subi	r30, 0x97	; 151
 6f6:	ff 4f       	sbci	r31, 0xFF	; 255
 6f8:	60 81       	ld	r22, Z
 6fa:	8c 2f       	mov	r24, r28
 6fc:	0e 94 29 02 	call	0x452	; 0x452 <DIO_InitPin>


void DIO_init(void)
{
	DIO_Pin_type index=0;
	for(index = 0; index<TOTAL_PINS; index++)
 700:	cf 5f       	subi	r28, 0xFF	; 255
 702:	c0 32       	cpi	r28, 0x20	; 32
 704:	a8 f3       	brcs	.-22     	; 0x6f0 <DIO_init+0x6>
	{
		DIO_InitPin(index, DIO_PinsStatusArr[index]);
	}
}
 706:	cf 91       	pop	r28
 708:	08 95       	ret

0000070a <DIO_ReadPin>:

DIO_PinVoltage_type	DIO_ReadPin(DIO_Pin_type pin)
{	
	DIO_Port_type port = pin/TOTAL_PINS_Per_Port;
 70a:	98 2f       	mov	r25, r24
 70c:	96 95       	lsr	r25
 70e:	96 95       	lsr	r25
 710:	96 95       	lsr	r25
	pin = pin %TOTAL_PINS_Per_Port;
 712:	48 2f       	mov	r20, r24
 714:	47 70       	andi	r20, 0x07	; 7
	DIO_PinVoltage_type reading=LOW;
	switch(port)
 716:	91 30       	cpi	r25, 0x01	; 1
 718:	81 f0       	breq	.+32     	; 0x73a <DIO_ReadPin+0x30>
 71a:	28 f0       	brcs	.+10     	; 0x726 <DIO_ReadPin+0x1c>
 71c:	92 30       	cpi	r25, 0x02	; 2
 71e:	b9 f0       	breq	.+46     	; 0x74e <DIO_ReadPin+0x44>
 720:	93 30       	cpi	r25, 0x03	; 3
 722:	f9 f0       	breq	.+62     	; 0x762 <DIO_ReadPin+0x58>
 724:	28 c0       	rjmp	.+80     	; 0x776 <DIO_ReadPin+0x6c>
	{
		case PA:
		reading = READ_BIT(PINA,pin);
 726:	99 b3       	in	r25, 0x19	; 25
 728:	89 2f       	mov	r24, r25
 72a:	90 e0       	ldi	r25, 0x00	; 0
 72c:	02 c0       	rjmp	.+4      	; 0x732 <DIO_ReadPin+0x28>
 72e:	95 95       	asr	r25
 730:	87 95       	ror	r24
 732:	4a 95       	dec	r20
 734:	e2 f7       	brpl	.-8      	; 0x72e <DIO_ReadPin+0x24>
 736:	81 70       	andi	r24, 0x01	; 1
		break;
 738:	08 95       	ret
		
		case PB:
		reading = READ_BIT(PINB,pin);
 73a:	26 b3       	in	r18, 0x16	; 22
 73c:	30 e0       	ldi	r19, 0x00	; 0
 73e:	c9 01       	movw	r24, r18
 740:	02 c0       	rjmp	.+4      	; 0x746 <DIO_ReadPin+0x3c>
 742:	95 95       	asr	r25
 744:	87 95       	ror	r24
 746:	4a 95       	dec	r20
 748:	e2 f7       	brpl	.-8      	; 0x742 <DIO_ReadPin+0x38>
 74a:	81 70       	andi	r24, 0x01	; 1
		break;
 74c:	08 95       	ret
		
		case PC:
		reading = READ_BIT(PINC,pin);
 74e:	23 b3       	in	r18, 0x13	; 19
 750:	30 e0       	ldi	r19, 0x00	; 0
 752:	c9 01       	movw	r24, r18
 754:	02 c0       	rjmp	.+4      	; 0x75a <DIO_ReadPin+0x50>
 756:	95 95       	asr	r25
 758:	87 95       	ror	r24
 75a:	4a 95       	dec	r20
 75c:	e2 f7       	brpl	.-8      	; 0x756 <DIO_ReadPin+0x4c>
 75e:	81 70       	andi	r24, 0x01	; 1
		break;
 760:	08 95       	ret
		
		case PD:
		reading = READ_BIT(PIND,pin);
 762:	20 b3       	in	r18, 0x10	; 16
 764:	30 e0       	ldi	r19, 0x00	; 0
 766:	c9 01       	movw	r24, r18
 768:	02 c0       	rjmp	.+4      	; 0x76e <DIO_ReadPin+0x64>
 76a:	95 95       	asr	r25
 76c:	87 95       	ror	r24
 76e:	4a 95       	dec	r20
 770:	e2 f7       	brpl	.-8      	; 0x76a <DIO_ReadPin+0x60>
 772:	81 70       	andi	r24, 0x01	; 1
		break;
 774:	08 95       	ret

DIO_PinVoltage_type	DIO_ReadPin(DIO_Pin_type pin)
{	
	DIO_Port_type port = pin/TOTAL_PINS_Per_Port;
	pin = pin %TOTAL_PINS_Per_Port;
	DIO_PinVoltage_type reading=LOW;
 776:	80 e0       	ldi	r24, 0x00	; 0
		case PD:
		reading = READ_BIT(PIND,pin);
		break;
	}
	return reading;
}
 778:	08 95       	ret

0000077a <DIO_WritePin>:

void DIO_WritePin(DIO_Pin_type pin ,DIO_PinVoltage_type volt)
{
		DIO_Port_type Port = pin/TOTAL_PINS_Per_Port;
 77a:	98 2f       	mov	r25, r24
 77c:	96 95       	lsr	r25
 77e:	96 95       	lsr	r25
 780:	96 95       	lsr	r25
		pin = pin % TOTAL_PINS_Per_Port;
 782:	87 70       	andi	r24, 0x07	; 7
		
		switch(volt)
 784:	66 23       	and	r22, r22
 786:	09 f4       	brne	.+2      	; 0x78a <DIO_WritePin+0x10>
 788:	3f c0       	rjmp	.+126    	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 78a:	61 30       	cpi	r22, 0x01	; 1
 78c:	09 f0       	breq	.+2      	; 0x790 <DIO_WritePin+0x16>
 78e:	7b c0       	rjmp	.+246    	; 0x886 <__stack+0x27>
			{
			case HIGH:
				switch(Port)
 790:	91 30       	cpi	r25, 0x01	; 1
 792:	99 f0       	breq	.+38     	; 0x7ba <DIO_WritePin+0x40>
 794:	28 f0       	brcs	.+10     	; 0x7a0 <DIO_WritePin+0x26>
 796:	92 30       	cpi	r25, 0x02	; 2
 798:	e9 f0       	breq	.+58     	; 0x7d4 <DIO_WritePin+0x5a>
 79a:	93 30       	cpi	r25, 0x03	; 3
 79c:	41 f1       	breq	.+80     	; 0x7ee <DIO_WritePin+0x74>
 79e:	08 95       	ret
				{
					case PA:
					SET_BIT(PORTA,pin);
 7a0:	4b b3       	in	r20, 0x1b	; 27
 7a2:	21 e0       	ldi	r18, 0x01	; 1
 7a4:	30 e0       	ldi	r19, 0x00	; 0
 7a6:	b9 01       	movw	r22, r18
 7a8:	02 c0       	rjmp	.+4      	; 0x7ae <DIO_WritePin+0x34>
 7aa:	66 0f       	add	r22, r22
 7ac:	77 1f       	adc	r23, r23
 7ae:	8a 95       	dec	r24
 7b0:	e2 f7       	brpl	.-8      	; 0x7aa <DIO_WritePin+0x30>
 7b2:	cb 01       	movw	r24, r22
 7b4:	84 2b       	or	r24, r20
 7b6:	8b bb       	out	0x1b, r24	; 27
					break;
 7b8:	08 95       	ret
					
					case PB:
					SET_BIT(PORTB,pin);
 7ba:	48 b3       	in	r20, 0x18	; 24
 7bc:	21 e0       	ldi	r18, 0x01	; 1
 7be:	30 e0       	ldi	r19, 0x00	; 0
 7c0:	b9 01       	movw	r22, r18
 7c2:	02 c0       	rjmp	.+4      	; 0x7c8 <DIO_WritePin+0x4e>
 7c4:	66 0f       	add	r22, r22
 7c6:	77 1f       	adc	r23, r23
 7c8:	8a 95       	dec	r24
 7ca:	e2 f7       	brpl	.-8      	; 0x7c4 <DIO_WritePin+0x4a>
 7cc:	cb 01       	movw	r24, r22
 7ce:	84 2b       	or	r24, r20
 7d0:	88 bb       	out	0x18, r24	; 24
					break;
 7d2:	08 95       	ret
					
					case PC:
					SET_BIT(PORTC,pin);
 7d4:	45 b3       	in	r20, 0x15	; 21
 7d6:	21 e0       	ldi	r18, 0x01	; 1
 7d8:	30 e0       	ldi	r19, 0x00	; 0
 7da:	b9 01       	movw	r22, r18
 7dc:	02 c0       	rjmp	.+4      	; 0x7e2 <DIO_WritePin+0x68>
 7de:	66 0f       	add	r22, r22
 7e0:	77 1f       	adc	r23, r23
 7e2:	8a 95       	dec	r24
 7e4:	e2 f7       	brpl	.-8      	; 0x7de <DIO_WritePin+0x64>
 7e6:	cb 01       	movw	r24, r22
 7e8:	84 2b       	or	r24, r20
 7ea:	85 bb       	out	0x15, r24	; 21
					break;
 7ec:	08 95       	ret
					
					case PD:
					SET_BIT(PORTD,pin);
 7ee:	42 b3       	in	r20, 0x12	; 18
 7f0:	21 e0       	ldi	r18, 0x01	; 1
 7f2:	30 e0       	ldi	r19, 0x00	; 0
 7f4:	b9 01       	movw	r22, r18
 7f6:	02 c0       	rjmp	.+4      	; 0x7fc <DIO_WritePin+0x82>
 7f8:	66 0f       	add	r22, r22
 7fa:	77 1f       	adc	r23, r23
 7fc:	8a 95       	dec	r24
 7fe:	e2 f7       	brpl	.-8      	; 0x7f8 <DIO_WritePin+0x7e>
 800:	cb 01       	movw	r24, r22
 802:	84 2b       	or	r24, r20
 804:	82 bb       	out	0x12, r24	; 18
					break;
 806:	08 95       	ret
				}
				break;
			
				case LOW:
				switch(Port)
 808:	91 30       	cpi	r25, 0x01	; 1
 80a:	a1 f0       	breq	.+40     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 80c:	28 f0       	brcs	.+10     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 80e:	92 30       	cpi	r25, 0x02	; 2
 810:	f9 f0       	breq	.+62     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 812:	93 30       	cpi	r25, 0x03	; 3
 814:	59 f1       	breq	.+86     	; 0x86c <__stack+0xd>
 816:	08 95       	ret
				{
					case PA:
					CLR_BIT(PORTA,pin);
 818:	4b b3       	in	r20, 0x1b	; 27
 81a:	21 e0       	ldi	r18, 0x01	; 1
 81c:	30 e0       	ldi	r19, 0x00	; 0
 81e:	b9 01       	movw	r22, r18
 820:	02 c0       	rjmp	.+4      	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 822:	66 0f       	add	r22, r22
 824:	77 1f       	adc	r23, r23
 826:	8a 95       	dec	r24
 828:	e2 f7       	brpl	.-8      	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 82a:	cb 01       	movw	r24, r22
 82c:	80 95       	com	r24
 82e:	84 23       	and	r24, r20
 830:	8b bb       	out	0x1b, r24	; 27
					break;
 832:	08 95       	ret
					
					case PB:
					CLR_BIT(PORTB,pin);
 834:	48 b3       	in	r20, 0x18	; 24
 836:	21 e0       	ldi	r18, 0x01	; 1
 838:	30 e0       	ldi	r19, 0x00	; 0
 83a:	b9 01       	movw	r22, r18
 83c:	02 c0       	rjmp	.+4      	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 83e:	66 0f       	add	r22, r22
 840:	77 1f       	adc	r23, r23
 842:	8a 95       	dec	r24
 844:	e2 f7       	brpl	.-8      	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
 846:	cb 01       	movw	r24, r22
 848:	80 95       	com	r24
 84a:	84 23       	and	r24, r20
 84c:	88 bb       	out	0x18, r24	; 24
					break;
 84e:	08 95       	ret
					
					case PC:
					CLR_BIT(PORTC,pin);
 850:	45 b3       	in	r20, 0x15	; 21
 852:	21 e0       	ldi	r18, 0x01	; 1
 854:	30 e0       	ldi	r19, 0x00	; 0
 856:	b9 01       	movw	r22, r18
 858:	02 c0       	rjmp	.+4      	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
 85a:	66 0f       	add	r22, r22
 85c:	77 1f       	adc	r23, r23
 85e:	8a 95       	dec	r24
 860:	e2 f7       	brpl	.-8      	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
 862:	cb 01       	movw	r24, r22
 864:	80 95       	com	r24
 866:	84 23       	and	r24, r20
 868:	85 bb       	out	0x15, r24	; 21
					break;
 86a:	08 95       	ret
					
					case PD:
					CLR_BIT(PORTD,pin);
 86c:	42 b3       	in	r20, 0x12	; 18
 86e:	21 e0       	ldi	r18, 0x01	; 1
 870:	30 e0       	ldi	r19, 0x00	; 0
 872:	b9 01       	movw	r22, r18
 874:	02 c0       	rjmp	.+4      	; 0x87a <__stack+0x1b>
 876:	66 0f       	add	r22, r22
 878:	77 1f       	adc	r23, r23
 87a:	8a 95       	dec	r24
 87c:	e2 f7       	brpl	.-8      	; 0x876 <__stack+0x17>
 87e:	cb 01       	movw	r24, r22
 880:	80 95       	com	r24
 882:	84 23       	and	r24, r20
 884:	82 bb       	out	0x12, r24	; 18
 886:	08 95       	ret

00000888 <EX_INT0_INIT>:
#include "MemMap.h"
#include "utils.h"

void EX_INT0_INIT(Edge_t Edge)
{	
	switch(Edge)
 888:	88 23       	and	r24, r24
 88a:	19 f0       	breq	.+6      	; 0x892 <EX_INT0_INIT+0xa>
 88c:	81 30       	cpi	r24, 0x01	; 1
 88e:	41 f0       	breq	.+16     	; 0x8a0 <EX_INT0_INIT+0x18>
 890:	0d c0       	rjmp	.+26     	; 0x8ac <EX_INT0_INIT+0x24>
	{
		case Falling_Edge:
		SET_BIT(MCUCR,ISC01);
 892:	85 b7       	in	r24, 0x35	; 53
 894:	82 60       	ori	r24, 0x02	; 2
 896:	85 bf       	out	0x35, r24	; 53
		CLR_BIT(MCUCR,ISC00);
 898:	85 b7       	in	r24, 0x35	; 53
 89a:	8e 7f       	andi	r24, 0xFE	; 254
 89c:	85 bf       	out	0x35, r24	; 53
		break;
 89e:	06 c0       	rjmp	.+12     	; 0x8ac <EX_INT0_INIT+0x24>
		case Rising_Edge:
		SET_BIT(MCUCR,ISC01);
 8a0:	85 b7       	in	r24, 0x35	; 53
 8a2:	82 60       	ori	r24, 0x02	; 2
 8a4:	85 bf       	out	0x35, r24	; 53
		CLR_BIT(MCUCR,ISC00);
 8a6:	85 b7       	in	r24, 0x35	; 53
 8a8:	8e 7f       	andi	r24, 0xFE	; 254
 8aa:	85 bf       	out	0x35, r24	; 53
		break;
	}
	SET_BIT(GICR,INT0);
 8ac:	8b b7       	in	r24, 0x3b	; 59
 8ae:	80 64       	ori	r24, 0x40	; 64
 8b0:	8b bf       	out	0x3b, r24	; 59
 8b2:	08 95       	ret

000008b4 <SPI_Init>:
#include "SPI.h"


void SPI_Init(void)
{
	SET_BIT(SPCR,DORD);
 8b4:	8d b1       	in	r24, 0x0d	; 13
 8b6:	80 62       	ori	r24, 0x20	; 32
 8b8:	8d b9       	out	0x0d, r24	; 13
	SET_BIT(SPCR,MSTR);
 8ba:	8d b1       	in	r24, 0x0d	; 13
 8bc:	80 61       	ori	r24, 0x10	; 16
 8be:	8d b9       	out	0x0d, r24	; 13
	SET_BIT(SPSR,SPI2X);
 8c0:	8e b1       	in	r24, 0x0e	; 14
 8c2:	81 60       	ori	r24, 0x01	; 1
 8c4:	8e b9       	out	0x0e, r24	; 14
	SET_BIT(SPCR,SPR0);
 8c6:	8d b1       	in	r24, 0x0d	; 13
 8c8:	81 60       	ori	r24, 0x01	; 1
 8ca:	8d b9       	out	0x0d, r24	; 13
	SET_BIT(SPCR,SPE);
 8cc:	8d b1       	in	r24, 0x0d	; 13
 8ce:	80 64       	ori	r24, 0x40	; 64
 8d0:	8d b9       	out	0x0d, r24	; 13
 8d2:	08 95       	ret

000008d4 <SPI_Send_Recieve>:
}

u8 SPI_Send_Recieve(u8 data)
{
	// write puffer
	SPDR=data;
 8d4:	8f b9       	out	0x0f, r24	; 15
	while(!READ_BIT(SPSR,SPIF));
 8d6:	77 9b       	sbis	0x0e, 7	; 14
 8d8:	fe cf       	rjmp	.-4      	; 0x8d6 <SPI_Send_Recieve+0x2>
	//READ PUFFER
	return SPDR;
 8da:	8f b1       	in	r24, 0x0f	; 15
 8dc:	08 95       	ret

000008de <__vector_7>:
		Timer1_OVF_Fptr();
	}
}*/

ISR(TIMER1_OCA_vect)
{
 8de:	1f 92       	push	r1
 8e0:	0f 92       	push	r0
 8e2:	0f b6       	in	r0, 0x3f	; 63
 8e4:	0f 92       	push	r0
 8e6:	11 24       	eor	r1, r1
 8e8:	2f 93       	push	r18
 8ea:	3f 93       	push	r19
 8ec:	4f 93       	push	r20
 8ee:	5f 93       	push	r21
 8f0:	6f 93       	push	r22
 8f2:	7f 93       	push	r23
 8f4:	8f 93       	push	r24
 8f6:	9f 93       	push	r25
 8f8:	af 93       	push	r26
 8fa:	bf 93       	push	r27
 8fc:	ef 93       	push	r30
 8fe:	ff 93       	push	r31
	if(Timer1_OCA_Fptr!=NULL_PTR)
 900:	e0 91 8f 00 	lds	r30, 0x008F	; 0x80008f <Timer1_OCA_Fptr>
 904:	f0 91 90 00 	lds	r31, 0x0090	; 0x800090 <Timer1_OCA_Fptr+0x1>
 908:	30 97       	sbiw	r30, 0x00	; 0
 90a:	09 f0       	breq	.+2      	; 0x90e <__vector_7+0x30>
	{
		Timer1_OCA_Fptr();
 90c:	09 95       	icall
	}
}
 90e:	ff 91       	pop	r31
 910:	ef 91       	pop	r30
 912:	bf 91       	pop	r27
 914:	af 91       	pop	r26
 916:	9f 91       	pop	r25
 918:	8f 91       	pop	r24
 91a:	7f 91       	pop	r23
 91c:	6f 91       	pop	r22
 91e:	5f 91       	pop	r21
 920:	4f 91       	pop	r20
 922:	3f 91       	pop	r19
 924:	2f 91       	pop	r18
 926:	0f 90       	pop	r0
 928:	0f be       	out	0x3f, r0	; 63
 92a:	0f 90       	pop	r0
 92c:	1f 90       	pop	r1
 92e:	18 95       	reti

00000930 <__vector_8>:

ISR(TIMER1_OCB_vect)
{
 930:	1f 92       	push	r1
 932:	0f 92       	push	r0
 934:	0f b6       	in	r0, 0x3f	; 63
 936:	0f 92       	push	r0
 938:	11 24       	eor	r1, r1
 93a:	2f 93       	push	r18
 93c:	3f 93       	push	r19
 93e:	4f 93       	push	r20
 940:	5f 93       	push	r21
 942:	6f 93       	push	r22
 944:	7f 93       	push	r23
 946:	8f 93       	push	r24
 948:	9f 93       	push	r25
 94a:	af 93       	push	r26
 94c:	bf 93       	push	r27
 94e:	ef 93       	push	r30
 950:	ff 93       	push	r31
	if(Timer1_OCB_Fptr!=NULL_PTR)
 952:	e0 91 8d 00 	lds	r30, 0x008D	; 0x80008d <Timer1_OCB_Fptr>
 956:	f0 91 8e 00 	lds	r31, 0x008E	; 0x80008e <Timer1_OCB_Fptr+0x1>
 95a:	30 97       	sbiw	r30, 0x00	; 0
 95c:	09 f0       	breq	.+2      	; 0x960 <__vector_8+0x30>
	{
		Timer1_OCB_Fptr();
 95e:	09 95       	icall
	}
}
 960:	ff 91       	pop	r31
 962:	ef 91       	pop	r30
 964:	bf 91       	pop	r27
 966:	af 91       	pop	r26
 968:	9f 91       	pop	r25
 96a:	8f 91       	pop	r24
 96c:	7f 91       	pop	r23
 96e:	6f 91       	pop	r22
 970:	5f 91       	pop	r21
 972:	4f 91       	pop	r20
 974:	3f 91       	pop	r19
 976:	2f 91       	pop	r18
 978:	0f 90       	pop	r0
 97a:	0f be       	out	0x3f, r0	; 63
 97c:	0f 90       	pop	r0
 97e:	1f 90       	pop	r1
 980:	18 95       	reti

00000982 <__vector_6>:

ISR(TIMER1_ICU_vect)
{
 982:	1f 92       	push	r1
 984:	0f 92       	push	r0
 986:	0f b6       	in	r0, 0x3f	; 63
 988:	0f 92       	push	r0
 98a:	11 24       	eor	r1, r1
 98c:	2f 93       	push	r18
 98e:	3f 93       	push	r19
 990:	4f 93       	push	r20
 992:	5f 93       	push	r21
 994:	6f 93       	push	r22
 996:	7f 93       	push	r23
 998:	8f 93       	push	r24
 99a:	9f 93       	push	r25
 99c:	af 93       	push	r26
 99e:	bf 93       	push	r27
 9a0:	ef 93       	push	r30
 9a2:	ff 93       	push	r31
	if(Timer1_ICU_Fptr!=NULL_PTR)
 9a4:	e0 91 8b 00 	lds	r30, 0x008B	; 0x80008b <Timer1_ICU_Fptr>
 9a8:	f0 91 8c 00 	lds	r31, 0x008C	; 0x80008c <Timer1_ICU_Fptr+0x1>
 9ac:	30 97       	sbiw	r30, 0x00	; 0
 9ae:	09 f0       	breq	.+2      	; 0x9b2 <__vector_6+0x30>
	{
		Timer1_ICU_Fptr();
 9b0:	09 95       	icall
	}
 9b2:	ff 91       	pop	r31
 9b4:	ef 91       	pop	r30
 9b6:	bf 91       	pop	r27
 9b8:	af 91       	pop	r26
 9ba:	9f 91       	pop	r25
 9bc:	8f 91       	pop	r24
 9be:	7f 91       	pop	r23
 9c0:	6f 91       	pop	r22
 9c2:	5f 91       	pop	r21
 9c4:	4f 91       	pop	r20
 9c6:	3f 91       	pop	r19
 9c8:	2f 91       	pop	r18
 9ca:	0f 90       	pop	r0
 9cc:	0f be       	out	0x3f, r0	; 63
 9ce:	0f 90       	pop	r0
 9d0:	1f 90       	pop	r1
 9d2:	18 95       	reti

000009d4 <__divmodsi4>:
 9d4:	05 2e       	mov	r0, r21
 9d6:	97 fb       	bst	r25, 7
 9d8:	1e f4       	brtc	.+6      	; 0x9e0 <__divmodsi4+0xc>
 9da:	00 94       	com	r0
 9dc:	0e 94 01 05 	call	0xa02	; 0xa02 <__negsi2>
 9e0:	57 fd       	sbrc	r21, 7
 9e2:	07 d0       	rcall	.+14     	; 0x9f2 <__divmodsi4_neg2>
 9e4:	0e 94 09 05 	call	0xa12	; 0xa12 <__udivmodsi4>
 9e8:	07 fc       	sbrc	r0, 7
 9ea:	03 d0       	rcall	.+6      	; 0x9f2 <__divmodsi4_neg2>
 9ec:	4e f4       	brtc	.+18     	; 0xa00 <__divmodsi4_exit>
 9ee:	0c 94 01 05 	jmp	0xa02	; 0xa02 <__negsi2>

000009f2 <__divmodsi4_neg2>:
 9f2:	50 95       	com	r21
 9f4:	40 95       	com	r20
 9f6:	30 95       	com	r19
 9f8:	21 95       	neg	r18
 9fa:	3f 4f       	sbci	r19, 0xFF	; 255
 9fc:	4f 4f       	sbci	r20, 0xFF	; 255
 9fe:	5f 4f       	sbci	r21, 0xFF	; 255

00000a00 <__divmodsi4_exit>:
 a00:	08 95       	ret

00000a02 <__negsi2>:
 a02:	90 95       	com	r25
 a04:	80 95       	com	r24
 a06:	70 95       	com	r23
 a08:	61 95       	neg	r22
 a0a:	7f 4f       	sbci	r23, 0xFF	; 255
 a0c:	8f 4f       	sbci	r24, 0xFF	; 255
 a0e:	9f 4f       	sbci	r25, 0xFF	; 255
 a10:	08 95       	ret

00000a12 <__udivmodsi4>:
 a12:	a1 e2       	ldi	r26, 0x21	; 33
 a14:	1a 2e       	mov	r1, r26
 a16:	aa 1b       	sub	r26, r26
 a18:	bb 1b       	sub	r27, r27
 a1a:	fd 01       	movw	r30, r26
 a1c:	0d c0       	rjmp	.+26     	; 0xa38 <__udivmodsi4_ep>

00000a1e <__udivmodsi4_loop>:
 a1e:	aa 1f       	adc	r26, r26
 a20:	bb 1f       	adc	r27, r27
 a22:	ee 1f       	adc	r30, r30
 a24:	ff 1f       	adc	r31, r31
 a26:	a2 17       	cp	r26, r18
 a28:	b3 07       	cpc	r27, r19
 a2a:	e4 07       	cpc	r30, r20
 a2c:	f5 07       	cpc	r31, r21
 a2e:	20 f0       	brcs	.+8      	; 0xa38 <__udivmodsi4_ep>
 a30:	a2 1b       	sub	r26, r18
 a32:	b3 0b       	sbc	r27, r19
 a34:	e4 0b       	sbc	r30, r20
 a36:	f5 0b       	sbc	r31, r21

00000a38 <__udivmodsi4_ep>:
 a38:	66 1f       	adc	r22, r22
 a3a:	77 1f       	adc	r23, r23
 a3c:	88 1f       	adc	r24, r24
 a3e:	99 1f       	adc	r25, r25
 a40:	1a 94       	dec	r1
 a42:	69 f7       	brne	.-38     	; 0xa1e <__udivmodsi4_loop>
 a44:	60 95       	com	r22
 a46:	70 95       	com	r23
 a48:	80 95       	com	r24
 a4a:	90 95       	com	r25
 a4c:	9b 01       	movw	r18, r22
 a4e:	ac 01       	movw	r20, r24
 a50:	bd 01       	movw	r22, r26
 a52:	cf 01       	movw	r24, r30
 a54:	08 95       	ret

00000a56 <_exit>:
 a56:	f8 94       	cli

00000a58 <__stop_program>:
 a58:	ff cf       	rjmp	.-2      	; 0xa58 <__stop_program>
