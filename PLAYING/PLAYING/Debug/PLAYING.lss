
PLAYING.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000055e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  0000055e  000005f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800080  00800080  00000612  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000612  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000644  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  00000680  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011a3  00000000  00000000  000007e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000817  00000000  00000000  0000198b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000aff  00000000  00000000  000021a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003a4  00000000  00000000  00002ca4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000aec  00000000  00000000  00003048  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000011dc  00000000  00000000  00003b34  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  00004d10  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 84 02 	jmp	0x508	; 0x508 <__vector_6>
  1c:	0c 94 32 02 	jmp	0x464	; 0x464 <__vector_7>
  20:	0c 94 5b 02 	jmp	0x4b6	; 0x4b6 <__vector_8>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e5       	ldi	r30, 0x5E	; 94
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 38       	cpi	r26, 0x80	; 128
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e8       	ldi	r26, 0x80	; 128
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 38       	cpi	r26, 0x8A	; 138
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 ad 02 	jmp	0x55a	; 0x55a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
u32 counter;


int main(void)
{
	DIO_init();
  92:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <DIO_init>
	//LCD_Init();
	sei();
  96:	78 94       	sei
	
	TIMER0_Init(TIMER0_NORMAL_MODE, TIMER0_SCALER_8);
  98:	62 e0       	ldi	r22, 0x02	; 2
  9a:	80 e0       	ldi	r24, 0x00	; 0
  9c:	0e 94 04 02 	call	0x408	; 0x408 <TIMER0_Init>
	TIMER0_OV_InterruptEnable();
  a0:	0e 94 2e 02 	call	0x45c	; 0x45c <TIMER0_OV_InterruptEnable>
	TCNT0 = 6;
  a4:	86 e0       	ldi	r24, 0x06	; 6
  a6:	82 bf       	out	0x32, r24	; 50
  a8:	ff cf       	rjmp	.-2      	; 0xa8 <main+0x16>

000000aa <__vector_11>:
	}
}


ISR(TIMER0_OV_vect)
{
  aa:	1f 92       	push	r1
  ac:	0f 92       	push	r0
  ae:	0f b6       	in	r0, 0x3f	; 63
  b0:	0f 92       	push	r0
  b2:	11 24       	eor	r1, r1
  b4:	2f 93       	push	r18
  b6:	3f 93       	push	r19
  b8:	4f 93       	push	r20
  ba:	5f 93       	push	r21
  bc:	6f 93       	push	r22
  be:	7f 93       	push	r23
  c0:	8f 93       	push	r24
  c2:	9f 93       	push	r25
  c4:	af 93       	push	r26
  c6:	bf 93       	push	r27
  c8:	ef 93       	push	r30
  ca:	ff 93       	push	r31
	TCNT0 = 6;
  cc:	86 e0       	ldi	r24, 0x06	; 6
  ce:	82 bf       	out	0x32, r24	; 50
	counter++;
  d0:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <counter>
  d4:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <counter+0x1>
  d8:	a0 91 88 00 	lds	r26, 0x0088	; 0x800088 <counter+0x2>
  dc:	b0 91 89 00 	lds	r27, 0x0089	; 0x800089 <counter+0x3>
  e0:	01 96       	adiw	r24, 0x01	; 1
  e2:	a1 1d       	adc	r26, r1
  e4:	b1 1d       	adc	r27, r1
  e6:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <counter>
  ea:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <counter+0x1>
  ee:	a0 93 88 00 	sts	0x0088, r26	; 0x800088 <counter+0x2>
  f2:	b0 93 89 00 	sts	0x0089, r27	; 0x800089 <counter+0x3>
	if(counter == 4000)
  f6:	80 3a       	cpi	r24, 0xA0	; 160
  f8:	2f e0       	ldi	r18, 0x0F	; 15
  fa:	92 07       	cpc	r25, r18
  fc:	a1 05       	cpc	r26, r1
  fe:	b1 05       	cpc	r27, r1
 100:	29 f4       	brne	.+10     	; 0x10c <__vector_11+0x62>
	{
		DIO_InitPin(PINA7,OUTPUT_H);
 102:	60 e0       	ldi	r22, 0x00	; 0
 104:	87 e0       	ldi	r24, 0x07	; 7
 106:	0e 94 a8 00 	call	0x150	; 0x150 <DIO_InitPin>
 10a:	11 c0       	rjmp	.+34     	; 0x12e <__vector_11+0x84>
	}
	else if(counter == 8000)
 10c:	80 34       	cpi	r24, 0x40	; 64
 10e:	9f 41       	sbci	r25, 0x1F	; 31
 110:	a1 05       	cpc	r26, r1
 112:	b1 05       	cpc	r27, r1
 114:	61 f4       	brne	.+24     	; 0x12e <__vector_11+0x84>
	{
		counter = 0;
 116:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <counter>
 11a:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <counter+0x1>
 11e:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <counter+0x2>
 122:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <counter+0x3>
		DIO_InitPin(PINA7,OUTPUT_L);
 126:	61 e0       	ldi	r22, 0x01	; 1
 128:	87 e0       	ldi	r24, 0x07	; 7
 12a:	0e 94 a8 00 	call	0x150	; 0x150 <DIO_InitPin>
	}
}
 12e:	ff 91       	pop	r31
 130:	ef 91       	pop	r30
 132:	bf 91       	pop	r27
 134:	af 91       	pop	r26
 136:	9f 91       	pop	r25
 138:	8f 91       	pop	r24
 13a:	7f 91       	pop	r23
 13c:	6f 91       	pop	r22
 13e:	5f 91       	pop	r21
 140:	4f 91       	pop	r20
 142:	3f 91       	pop	r19
 144:	2f 91       	pop	r18
 146:	0f 90       	pop	r0
 148:	0f be       	out	0x3f, r0	; 63
 14a:	0f 90       	pop	r0
 14c:	1f 90       	pop	r1
 14e:	18 95       	reti

00000150 <DIO_InitPin>:
};	


void DIO_InitPin(DIO_Pin_type pin_num, DIO_PinStatus_type status) //pin_num = 25. 
{
	DIO_Port_type port = pin_num/8;
 150:	98 2f       	mov	r25, r24
 152:	96 95       	lsr	r25
 154:	96 95       	lsr	r25
 156:	96 95       	lsr	r25
	pin_num = pin_num%8;
 158:	87 70       	andi	r24, 0x07	; 7
	
	switch (status)
 15a:	61 30       	cpi	r22, 0x01	; 1
 15c:	49 f0       	breq	.+18     	; 0x170 <DIO_InitPin+0x20>
 15e:	08 f4       	brcc	.+2      	; 0x162 <DIO_InitPin+0x12>
 160:	57 c0       	rjmp	.+174    	; 0x210 <DIO_InitPin+0xc0>
 162:	62 30       	cpi	r22, 0x02	; 2
 164:	09 f4       	brne	.+2      	; 0x168 <DIO_InitPin+0x18>
 166:	a0 c0       	rjmp	.+320    	; 0x2a8 <DIO_InitPin+0x158>
 168:	63 30       	cpi	r22, 0x03	; 3
 16a:	09 f4       	brne	.+2      	; 0x16e <DIO_InitPin+0x1e>
 16c:	ed c0       	rjmp	.+474    	; 0x348 <DIO_InitPin+0x1f8>
 16e:	08 95       	ret
	{
	case OUTPUT_L:
		switch(port)
 170:	91 30       	cpi	r25, 0x01	; 1
 172:	c1 f0       	breq	.+48     	; 0x1a4 <DIO_InitPin+0x54>
 174:	28 f0       	brcs	.+10     	; 0x180 <DIO_InitPin+0x30>
 176:	92 30       	cpi	r25, 0x02	; 2
 178:	39 f1       	breq	.+78     	; 0x1c8 <DIO_InitPin+0x78>
 17a:	93 30       	cpi	r25, 0x03	; 3
 17c:	b9 f1       	breq	.+110    	; 0x1ec <DIO_InitPin+0x9c>
 17e:	08 95       	ret
		{
			case PA:
			CLR_BIT(PORTA,pin_num);
 180:	4b b3       	in	r20, 0x1b	; 27
 182:	21 e0       	ldi	r18, 0x01	; 1
 184:	30 e0       	ldi	r19, 0x00	; 0
 186:	b9 01       	movw	r22, r18
 188:	02 c0       	rjmp	.+4      	; 0x18e <DIO_InitPin+0x3e>
 18a:	66 0f       	add	r22, r22
 18c:	77 1f       	adc	r23, r23
 18e:	8a 95       	dec	r24
 190:	e2 f7       	brpl	.-8      	; 0x18a <DIO_InitPin+0x3a>
 192:	cb 01       	movw	r24, r22
 194:	96 2f       	mov	r25, r22
 196:	90 95       	com	r25
 198:	94 23       	and	r25, r20
 19a:	9b bb       	out	0x1b, r25	; 27
			SET_BIT(DDRA,pin_num);
 19c:	9a b3       	in	r25, 0x1a	; 26
 19e:	89 2b       	or	r24, r25
 1a0:	8a bb       	out	0x1a, r24	; 26
			break;
 1a2:	08 95       	ret
				
			case PB:
			CLR_BIT(PORTB,pin_num);
 1a4:	48 b3       	in	r20, 0x18	; 24
 1a6:	21 e0       	ldi	r18, 0x01	; 1
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	b9 01       	movw	r22, r18
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <DIO_InitPin+0x62>
 1ae:	66 0f       	add	r22, r22
 1b0:	77 1f       	adc	r23, r23
 1b2:	8a 95       	dec	r24
 1b4:	e2 f7       	brpl	.-8      	; 0x1ae <DIO_InitPin+0x5e>
 1b6:	cb 01       	movw	r24, r22
 1b8:	96 2f       	mov	r25, r22
 1ba:	90 95       	com	r25
 1bc:	94 23       	and	r25, r20
 1be:	98 bb       	out	0x18, r25	; 24
			SET_BIT(DDRB,pin_num);
 1c0:	97 b3       	in	r25, 0x17	; 23
 1c2:	89 2b       	or	r24, r25
 1c4:	87 bb       	out	0x17, r24	; 23
			break;
 1c6:	08 95       	ret
			
			case PC:
			CLR_BIT(PORTC,pin_num);
 1c8:	45 b3       	in	r20, 0x15	; 21
 1ca:	21 e0       	ldi	r18, 0x01	; 1
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	b9 01       	movw	r22, r18
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <DIO_InitPin+0x86>
 1d2:	66 0f       	add	r22, r22
 1d4:	77 1f       	adc	r23, r23
 1d6:	8a 95       	dec	r24
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <DIO_InitPin+0x82>
 1da:	cb 01       	movw	r24, r22
 1dc:	96 2f       	mov	r25, r22
 1de:	90 95       	com	r25
 1e0:	94 23       	and	r25, r20
 1e2:	95 bb       	out	0x15, r25	; 21
			SET_BIT(DDRC,pin_num);
 1e4:	94 b3       	in	r25, 0x14	; 20
 1e6:	89 2b       	or	r24, r25
 1e8:	84 bb       	out	0x14, r24	; 20
			break;
 1ea:	08 95       	ret
			
			case PD:
			CLR_BIT(PORTD,pin_num);
 1ec:	42 b3       	in	r20, 0x12	; 18
 1ee:	21 e0       	ldi	r18, 0x01	; 1
 1f0:	30 e0       	ldi	r19, 0x00	; 0
 1f2:	b9 01       	movw	r22, r18
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <DIO_InitPin+0xaa>
 1f6:	66 0f       	add	r22, r22
 1f8:	77 1f       	adc	r23, r23
 1fa:	8a 95       	dec	r24
 1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <DIO_InitPin+0xa6>
 1fe:	cb 01       	movw	r24, r22
 200:	96 2f       	mov	r25, r22
 202:	90 95       	com	r25
 204:	94 23       	and	r25, r20
 206:	92 bb       	out	0x12, r25	; 18
			SET_BIT(DDRD,pin_num);
 208:	91 b3       	in	r25, 0x11	; 17
 20a:	89 2b       	or	r24, r25
 20c:	81 bb       	out	0x11, r24	; 17
			break;	
 20e:	08 95       	ret
		}
		break;
		
		case OUTPUT_H:
		switch(port)
 210:	91 30       	cpi	r25, 0x01	; 1
 212:	b9 f0       	breq	.+46     	; 0x242 <DIO_InitPin+0xf2>
 214:	28 f0       	brcs	.+10     	; 0x220 <DIO_InitPin+0xd0>
 216:	92 30       	cpi	r25, 0x02	; 2
 218:	29 f1       	breq	.+74     	; 0x264 <DIO_InitPin+0x114>
 21a:	93 30       	cpi	r25, 0x03	; 3
 21c:	a1 f1       	breq	.+104    	; 0x286 <DIO_InitPin+0x136>
 21e:	08 95       	ret
		{
			case PA:
			SET_BIT(PORTA,pin_num);
 220:	4b b3       	in	r20, 0x1b	; 27
 222:	21 e0       	ldi	r18, 0x01	; 1
 224:	30 e0       	ldi	r19, 0x00	; 0
 226:	b9 01       	movw	r22, r18
 228:	02 c0       	rjmp	.+4      	; 0x22e <DIO_InitPin+0xde>
 22a:	66 0f       	add	r22, r22
 22c:	77 1f       	adc	r23, r23
 22e:	8a 95       	dec	r24
 230:	e2 f7       	brpl	.-8      	; 0x22a <DIO_InitPin+0xda>
 232:	cb 01       	movw	r24, r22
 234:	94 2f       	mov	r25, r20
 236:	98 2b       	or	r25, r24
 238:	9b bb       	out	0x1b, r25	; 27
			SET_BIT(DDRA,pin_num);
 23a:	9a b3       	in	r25, 0x1a	; 26
 23c:	89 2b       	or	r24, r25
 23e:	8a bb       	out	0x1a, r24	; 26
			break;
 240:	08 95       	ret
			
			case PB:
			SET_BIT(PORTB,pin_num);
 242:	48 b3       	in	r20, 0x18	; 24
 244:	21 e0       	ldi	r18, 0x01	; 1
 246:	30 e0       	ldi	r19, 0x00	; 0
 248:	b9 01       	movw	r22, r18
 24a:	02 c0       	rjmp	.+4      	; 0x250 <DIO_InitPin+0x100>
 24c:	66 0f       	add	r22, r22
 24e:	77 1f       	adc	r23, r23
 250:	8a 95       	dec	r24
 252:	e2 f7       	brpl	.-8      	; 0x24c <DIO_InitPin+0xfc>
 254:	cb 01       	movw	r24, r22
 256:	94 2f       	mov	r25, r20
 258:	98 2b       	or	r25, r24
 25a:	98 bb       	out	0x18, r25	; 24
			SET_BIT(DDRB,pin_num);
 25c:	97 b3       	in	r25, 0x17	; 23
 25e:	89 2b       	or	r24, r25
 260:	87 bb       	out	0x17, r24	; 23
			break;
 262:	08 95       	ret
			
			case PC:
			SET_BIT(PORTC,pin_num);
 264:	45 b3       	in	r20, 0x15	; 21
 266:	21 e0       	ldi	r18, 0x01	; 1
 268:	30 e0       	ldi	r19, 0x00	; 0
 26a:	b9 01       	movw	r22, r18
 26c:	02 c0       	rjmp	.+4      	; 0x272 <DIO_InitPin+0x122>
 26e:	66 0f       	add	r22, r22
 270:	77 1f       	adc	r23, r23
 272:	8a 95       	dec	r24
 274:	e2 f7       	brpl	.-8      	; 0x26e <DIO_InitPin+0x11e>
 276:	cb 01       	movw	r24, r22
 278:	94 2f       	mov	r25, r20
 27a:	98 2b       	or	r25, r24
 27c:	95 bb       	out	0x15, r25	; 21
			SET_BIT(DDRC,pin_num);
 27e:	94 b3       	in	r25, 0x14	; 20
 280:	89 2b       	or	r24, r25
 282:	84 bb       	out	0x14, r24	; 20
			break;
 284:	08 95       	ret
			
			case PD:
			SET_BIT(PORTD,pin_num);
 286:	42 b3       	in	r20, 0x12	; 18
 288:	21 e0       	ldi	r18, 0x01	; 1
 28a:	30 e0       	ldi	r19, 0x00	; 0
 28c:	b9 01       	movw	r22, r18
 28e:	02 c0       	rjmp	.+4      	; 0x294 <DIO_InitPin+0x144>
 290:	66 0f       	add	r22, r22
 292:	77 1f       	adc	r23, r23
 294:	8a 95       	dec	r24
 296:	e2 f7       	brpl	.-8      	; 0x290 <DIO_InitPin+0x140>
 298:	cb 01       	movw	r24, r22
 29a:	94 2f       	mov	r25, r20
 29c:	98 2b       	or	r25, r24
 29e:	92 bb       	out	0x12, r25	; 18
			SET_BIT(DDRD,pin_num);
 2a0:	91 b3       	in	r25, 0x11	; 17
 2a2:	89 2b       	or	r24, r25
 2a4:	81 bb       	out	0x11, r24	; 17
			break;
 2a6:	08 95       	ret
		}
		break;
		
		
		case INFREE:
			switch(port)
 2a8:	91 30       	cpi	r25, 0x01	; 1
 2aa:	c1 f0       	breq	.+48     	; 0x2dc <DIO_InitPin+0x18c>
 2ac:	28 f0       	brcs	.+10     	; 0x2b8 <DIO_InitPin+0x168>
 2ae:	92 30       	cpi	r25, 0x02	; 2
 2b0:	39 f1       	breq	.+78     	; 0x300 <DIO_InitPin+0x1b0>
 2b2:	93 30       	cpi	r25, 0x03	; 3
 2b4:	b9 f1       	breq	.+110    	; 0x324 <DIO_InitPin+0x1d4>
 2b6:	08 95       	ret
			{
				case PA:
				CLR_BIT(PORTA,pin_num);
 2b8:	4b b3       	in	r20, 0x1b	; 27
 2ba:	21 e0       	ldi	r18, 0x01	; 1
 2bc:	30 e0       	ldi	r19, 0x00	; 0
 2be:	b9 01       	movw	r22, r18
 2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <DIO_InitPin+0x176>
 2c2:	66 0f       	add	r22, r22
 2c4:	77 1f       	adc	r23, r23
 2c6:	8a 95       	dec	r24
 2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <DIO_InitPin+0x172>
 2ca:	cb 01       	movw	r24, r22
 2cc:	80 95       	com	r24
 2ce:	94 2f       	mov	r25, r20
 2d0:	98 23       	and	r25, r24
 2d2:	9b bb       	out	0x1b, r25	; 27
				CLR_BIT(DDRA,pin_num);
 2d4:	9a b3       	in	r25, 0x1a	; 26
 2d6:	89 23       	and	r24, r25
 2d8:	8a bb       	out	0x1a, r24	; 26
				break;
 2da:	08 95       	ret
				
				case PB:
				CLR_BIT(PORTB,pin_num);
 2dc:	48 b3       	in	r20, 0x18	; 24
 2de:	21 e0       	ldi	r18, 0x01	; 1
 2e0:	30 e0       	ldi	r19, 0x00	; 0
 2e2:	b9 01       	movw	r22, r18
 2e4:	02 c0       	rjmp	.+4      	; 0x2ea <DIO_InitPin+0x19a>
 2e6:	66 0f       	add	r22, r22
 2e8:	77 1f       	adc	r23, r23
 2ea:	8a 95       	dec	r24
 2ec:	e2 f7       	brpl	.-8      	; 0x2e6 <DIO_InitPin+0x196>
 2ee:	cb 01       	movw	r24, r22
 2f0:	80 95       	com	r24
 2f2:	94 2f       	mov	r25, r20
 2f4:	98 23       	and	r25, r24
 2f6:	98 bb       	out	0x18, r25	; 24
				CLR_BIT(DDRB,pin_num);
 2f8:	97 b3       	in	r25, 0x17	; 23
 2fa:	89 23       	and	r24, r25
 2fc:	87 bb       	out	0x17, r24	; 23
				break;
 2fe:	08 95       	ret
				
				case PC:
				CLR_BIT(PORTC,pin_num);
 300:	45 b3       	in	r20, 0x15	; 21
 302:	21 e0       	ldi	r18, 0x01	; 1
 304:	30 e0       	ldi	r19, 0x00	; 0
 306:	b9 01       	movw	r22, r18
 308:	02 c0       	rjmp	.+4      	; 0x30e <DIO_InitPin+0x1be>
 30a:	66 0f       	add	r22, r22
 30c:	77 1f       	adc	r23, r23
 30e:	8a 95       	dec	r24
 310:	e2 f7       	brpl	.-8      	; 0x30a <DIO_InitPin+0x1ba>
 312:	cb 01       	movw	r24, r22
 314:	80 95       	com	r24
 316:	94 2f       	mov	r25, r20
 318:	98 23       	and	r25, r24
 31a:	95 bb       	out	0x15, r25	; 21
				CLR_BIT(DDRC,pin_num);
 31c:	94 b3       	in	r25, 0x14	; 20
 31e:	89 23       	and	r24, r25
 320:	84 bb       	out	0x14, r24	; 20
				break;
 322:	08 95       	ret
				
				case PD:
				CLR_BIT(PORTD,pin_num);
 324:	42 b3       	in	r20, 0x12	; 18
 326:	21 e0       	ldi	r18, 0x01	; 1
 328:	30 e0       	ldi	r19, 0x00	; 0
 32a:	b9 01       	movw	r22, r18
 32c:	02 c0       	rjmp	.+4      	; 0x332 <DIO_InitPin+0x1e2>
 32e:	66 0f       	add	r22, r22
 330:	77 1f       	adc	r23, r23
 332:	8a 95       	dec	r24
 334:	e2 f7       	brpl	.-8      	; 0x32e <DIO_InitPin+0x1de>
 336:	cb 01       	movw	r24, r22
 338:	80 95       	com	r24
 33a:	94 2f       	mov	r25, r20
 33c:	98 23       	and	r25, r24
 33e:	92 bb       	out	0x12, r25	; 18
				CLR_BIT(DDRD,pin_num);
 340:	91 b3       	in	r25, 0x11	; 17
 342:	89 23       	and	r24, r25
 344:	81 bb       	out	0x11, r24	; 17
				break;
 346:	08 95       	ret
			}
			break;
			
		case INPULL:
			switch(port)
 348:	91 30       	cpi	r25, 0x01	; 1
 34a:	c1 f0       	breq	.+48     	; 0x37c <DIO_InitPin+0x22c>
 34c:	28 f0       	brcs	.+10     	; 0x358 <DIO_InitPin+0x208>
 34e:	92 30       	cpi	r25, 0x02	; 2
 350:	39 f1       	breq	.+78     	; 0x3a0 <DIO_InitPin+0x250>
 352:	93 30       	cpi	r25, 0x03	; 3
 354:	b9 f1       	breq	.+110    	; 0x3c4 <DIO_InitPin+0x274>
 356:	08 95       	ret
			{
				case PA:
				CLR_BIT(DDRA,pin_num);
 358:	4a b3       	in	r20, 0x1a	; 26
 35a:	21 e0       	ldi	r18, 0x01	; 1
 35c:	30 e0       	ldi	r19, 0x00	; 0
 35e:	b9 01       	movw	r22, r18
 360:	02 c0       	rjmp	.+4      	; 0x366 <DIO_InitPin+0x216>
 362:	66 0f       	add	r22, r22
 364:	77 1f       	adc	r23, r23
 366:	8a 95       	dec	r24
 368:	e2 f7       	brpl	.-8      	; 0x362 <DIO_InitPin+0x212>
 36a:	cb 01       	movw	r24, r22
 36c:	96 2f       	mov	r25, r22
 36e:	90 95       	com	r25
 370:	94 23       	and	r25, r20
 372:	9a bb       	out	0x1a, r25	; 26
				SET_BIT(PORTA,pin_num);
 374:	9b b3       	in	r25, 0x1b	; 27
 376:	89 2b       	or	r24, r25
 378:	8b bb       	out	0x1b, r24	; 27
				break;
 37a:	08 95       	ret
				
				case PB:
				CLR_BIT(DDRB,pin_num);
 37c:	47 b3       	in	r20, 0x17	; 23
 37e:	21 e0       	ldi	r18, 0x01	; 1
 380:	30 e0       	ldi	r19, 0x00	; 0
 382:	b9 01       	movw	r22, r18
 384:	02 c0       	rjmp	.+4      	; 0x38a <DIO_InitPin+0x23a>
 386:	66 0f       	add	r22, r22
 388:	77 1f       	adc	r23, r23
 38a:	8a 95       	dec	r24
 38c:	e2 f7       	brpl	.-8      	; 0x386 <DIO_InitPin+0x236>
 38e:	cb 01       	movw	r24, r22
 390:	96 2f       	mov	r25, r22
 392:	90 95       	com	r25
 394:	94 23       	and	r25, r20
 396:	97 bb       	out	0x17, r25	; 23
				SET_BIT(PORTB,pin_num);
 398:	98 b3       	in	r25, 0x18	; 24
 39a:	89 2b       	or	r24, r25
 39c:	88 bb       	out	0x18, r24	; 24
				break;
 39e:	08 95       	ret
				
				case PC:
				CLR_BIT(DDRC,pin_num);
 3a0:	44 b3       	in	r20, 0x14	; 20
 3a2:	21 e0       	ldi	r18, 0x01	; 1
 3a4:	30 e0       	ldi	r19, 0x00	; 0
 3a6:	b9 01       	movw	r22, r18
 3a8:	02 c0       	rjmp	.+4      	; 0x3ae <DIO_InitPin+0x25e>
 3aa:	66 0f       	add	r22, r22
 3ac:	77 1f       	adc	r23, r23
 3ae:	8a 95       	dec	r24
 3b0:	e2 f7       	brpl	.-8      	; 0x3aa <DIO_InitPin+0x25a>
 3b2:	cb 01       	movw	r24, r22
 3b4:	96 2f       	mov	r25, r22
 3b6:	90 95       	com	r25
 3b8:	94 23       	and	r25, r20
 3ba:	94 bb       	out	0x14, r25	; 20
				SET_BIT(PORTC,pin_num);
 3bc:	95 b3       	in	r25, 0x15	; 21
 3be:	89 2b       	or	r24, r25
 3c0:	85 bb       	out	0x15, r24	; 21
				break;
 3c2:	08 95       	ret
				
				case PD:
				CLR_BIT(DDRD,pin_num);
 3c4:	41 b3       	in	r20, 0x11	; 17
 3c6:	21 e0       	ldi	r18, 0x01	; 1
 3c8:	30 e0       	ldi	r19, 0x00	; 0
 3ca:	b9 01       	movw	r22, r18
 3cc:	02 c0       	rjmp	.+4      	; 0x3d2 <DIO_InitPin+0x282>
 3ce:	66 0f       	add	r22, r22
 3d0:	77 1f       	adc	r23, r23
 3d2:	8a 95       	dec	r24
 3d4:	e2 f7       	brpl	.-8      	; 0x3ce <DIO_InitPin+0x27e>
 3d6:	cb 01       	movw	r24, r22
 3d8:	96 2f       	mov	r25, r22
 3da:	90 95       	com	r25
 3dc:	94 23       	and	r25, r20
 3de:	91 bb       	out	0x11, r25	; 17
				SET_BIT(PORTD,pin_num);
 3e0:	92 b3       	in	r25, 0x12	; 18
 3e2:	89 2b       	or	r24, r25
 3e4:	82 bb       	out	0x12, r24	; 18
 3e6:	08 95       	ret

000003e8 <DIO_init>:
	}
}


void DIO_init(void)
{
 3e8:	cf 93       	push	r28
	DIO_Pin_type index=0;
	for(index = 0; index<TOTAL_PINS; index++)
 3ea:	c0 e0       	ldi	r28, 0x00	; 0
 3ec:	09 c0       	rjmp	.+18     	; 0x400 <__EEPROM_REGION_LENGTH__>
	{
		DIO_InitPin(index, DIO_PinsStatusArr[index]);
 3ee:	ec 2f       	mov	r30, r28
 3f0:	f0 e0       	ldi	r31, 0x00	; 0
 3f2:	e0 5a       	subi	r30, 0xA0	; 160
 3f4:	ff 4f       	sbci	r31, 0xFF	; 255
 3f6:	60 81       	ld	r22, Z
 3f8:	8c 2f       	mov	r24, r28
 3fa:	0e 94 a8 00 	call	0x150	; 0x150 <DIO_InitPin>


void DIO_init(void)
{
	DIO_Pin_type index=0;
	for(index = 0; index<TOTAL_PINS; index++)
 3fe:	cf 5f       	subi	r28, 0xFF	; 255
 400:	c0 32       	cpi	r28, 0x20	; 32
 402:	a8 f3       	brcs	.-22     	; 0x3ee <DIO_init+0x6>
	{
		DIO_InitPin(index, DIO_PinsStatusArr[index]);
	}
}
 404:	cf 91       	pop	r28
 406:	08 95       	ret

00000408 <TIMER0_Init>:
	Timer1_OCB_Fptr=LocalFptr;
}

void Timer1_ICU_SetCallBack(void(*LocalFptr)(void))
{
	Timer1_ICU_Fptr=LocalFptr;
 408:	81 30       	cpi	r24, 0x01	; 1
 40a:	69 f0       	breq	.+26     	; 0x426 <TIMER0_Init+0x1e>
 40c:	28 f0       	brcs	.+10     	; 0x418 <TIMER0_Init+0x10>
 40e:	82 30       	cpi	r24, 0x02	; 2
 410:	89 f0       	breq	.+34     	; 0x434 <TIMER0_Init+0x2c>
 412:	83 30       	cpi	r24, 0x03	; 3
 414:	b1 f0       	breq	.+44     	; 0x442 <TIMER0_Init+0x3a>
 416:	1b c0       	rjmp	.+54     	; 0x44e <TIMER0_Init+0x46>
 418:	83 b7       	in	r24, 0x33	; 51
 41a:	8f 7b       	andi	r24, 0xBF	; 191
 41c:	83 bf       	out	0x33, r24	; 51
 41e:	83 b7       	in	r24, 0x33	; 51
 420:	87 7f       	andi	r24, 0xF7	; 247
 422:	83 bf       	out	0x33, r24	; 51
 424:	14 c0       	rjmp	.+40     	; 0x44e <TIMER0_Init+0x46>
 426:	83 b7       	in	r24, 0x33	; 51
 428:	80 64       	ori	r24, 0x40	; 64
 42a:	83 bf       	out	0x33, r24	; 51
 42c:	83 b7       	in	r24, 0x33	; 51
 42e:	87 7f       	andi	r24, 0xF7	; 247
 430:	83 bf       	out	0x33, r24	; 51
 432:	0d c0       	rjmp	.+26     	; 0x44e <TIMER0_Init+0x46>
 434:	83 b7       	in	r24, 0x33	; 51
 436:	8f 7b       	andi	r24, 0xBF	; 191
 438:	83 bf       	out	0x33, r24	; 51
 43a:	83 b7       	in	r24, 0x33	; 51
 43c:	88 60       	ori	r24, 0x08	; 8
 43e:	83 bf       	out	0x33, r24	; 51
 440:	06 c0       	rjmp	.+12     	; 0x44e <TIMER0_Init+0x46>
 442:	83 b7       	in	r24, 0x33	; 51
 444:	80 64       	ori	r24, 0x40	; 64
 446:	83 bf       	out	0x33, r24	; 51
 448:	83 b7       	in	r24, 0x33	; 51
 44a:	88 60       	ori	r24, 0x08	; 8
 44c:	83 bf       	out	0x33, r24	; 51
 44e:	83 b7       	in	r24, 0x33	; 51
 450:	88 7f       	andi	r24, 0xF8	; 248
 452:	83 bf       	out	0x33, r24	; 51
 454:	83 b7       	in	r24, 0x33	; 51
 456:	68 2b       	or	r22, r24
 458:	63 bf       	out	0x33, r22	; 51
 45a:	08 95       	ret

0000045c <TIMER0_OV_InterruptEnable>:
 45c:	89 b7       	in	r24, 0x39	; 57
 45e:	81 60       	ori	r24, 0x01	; 1
 460:	89 bf       	out	0x39, r24	; 57
 462:	08 95       	ret

00000464 <__vector_7>:
		Timer1_OVF_Fptr();
	}
}*/

ISR(TIMER1_OCA_vect)
{
 464:	1f 92       	push	r1
 466:	0f 92       	push	r0
 468:	0f b6       	in	r0, 0x3f	; 63
 46a:	0f 92       	push	r0
 46c:	11 24       	eor	r1, r1
 46e:	2f 93       	push	r18
 470:	3f 93       	push	r19
 472:	4f 93       	push	r20
 474:	5f 93       	push	r21
 476:	6f 93       	push	r22
 478:	7f 93       	push	r23
 47a:	8f 93       	push	r24
 47c:	9f 93       	push	r25
 47e:	af 93       	push	r26
 480:	bf 93       	push	r27
 482:	ef 93       	push	r30
 484:	ff 93       	push	r31
	if(Timer1_OCA_Fptr!=NULL_PTR)
 486:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <Timer1_OCA_Fptr>
 48a:	f0 91 85 00 	lds	r31, 0x0085	; 0x800085 <Timer1_OCA_Fptr+0x1>
 48e:	30 97       	sbiw	r30, 0x00	; 0
 490:	09 f0       	breq	.+2      	; 0x494 <__vector_7+0x30>
	{
		Timer1_OCA_Fptr();
 492:	09 95       	icall
	}
}
 494:	ff 91       	pop	r31
 496:	ef 91       	pop	r30
 498:	bf 91       	pop	r27
 49a:	af 91       	pop	r26
 49c:	9f 91       	pop	r25
 49e:	8f 91       	pop	r24
 4a0:	7f 91       	pop	r23
 4a2:	6f 91       	pop	r22
 4a4:	5f 91       	pop	r21
 4a6:	4f 91       	pop	r20
 4a8:	3f 91       	pop	r19
 4aa:	2f 91       	pop	r18
 4ac:	0f 90       	pop	r0
 4ae:	0f be       	out	0x3f, r0	; 63
 4b0:	0f 90       	pop	r0
 4b2:	1f 90       	pop	r1
 4b4:	18 95       	reti

000004b6 <__vector_8>:

ISR(TIMER1_OCB_vect)
{
 4b6:	1f 92       	push	r1
 4b8:	0f 92       	push	r0
 4ba:	0f b6       	in	r0, 0x3f	; 63
 4bc:	0f 92       	push	r0
 4be:	11 24       	eor	r1, r1
 4c0:	2f 93       	push	r18
 4c2:	3f 93       	push	r19
 4c4:	4f 93       	push	r20
 4c6:	5f 93       	push	r21
 4c8:	6f 93       	push	r22
 4ca:	7f 93       	push	r23
 4cc:	8f 93       	push	r24
 4ce:	9f 93       	push	r25
 4d0:	af 93       	push	r26
 4d2:	bf 93       	push	r27
 4d4:	ef 93       	push	r30
 4d6:	ff 93       	push	r31
	if(Timer1_OCB_Fptr!=NULL_PTR)
 4d8:	e0 91 82 00 	lds	r30, 0x0082	; 0x800082 <Timer1_OCB_Fptr>
 4dc:	f0 91 83 00 	lds	r31, 0x0083	; 0x800083 <Timer1_OCB_Fptr+0x1>
 4e0:	30 97       	sbiw	r30, 0x00	; 0
 4e2:	09 f0       	breq	.+2      	; 0x4e6 <__vector_8+0x30>
	{
		Timer1_OCB_Fptr();
 4e4:	09 95       	icall
	}
}
 4e6:	ff 91       	pop	r31
 4e8:	ef 91       	pop	r30
 4ea:	bf 91       	pop	r27
 4ec:	af 91       	pop	r26
 4ee:	9f 91       	pop	r25
 4f0:	8f 91       	pop	r24
 4f2:	7f 91       	pop	r23
 4f4:	6f 91       	pop	r22
 4f6:	5f 91       	pop	r21
 4f8:	4f 91       	pop	r20
 4fa:	3f 91       	pop	r19
 4fc:	2f 91       	pop	r18
 4fe:	0f 90       	pop	r0
 500:	0f be       	out	0x3f, r0	; 63
 502:	0f 90       	pop	r0
 504:	1f 90       	pop	r1
 506:	18 95       	reti

00000508 <__vector_6>:

ISR(TIMER1_ICU_vect)
{
 508:	1f 92       	push	r1
 50a:	0f 92       	push	r0
 50c:	0f b6       	in	r0, 0x3f	; 63
 50e:	0f 92       	push	r0
 510:	11 24       	eor	r1, r1
 512:	2f 93       	push	r18
 514:	3f 93       	push	r19
 516:	4f 93       	push	r20
 518:	5f 93       	push	r21
 51a:	6f 93       	push	r22
 51c:	7f 93       	push	r23
 51e:	8f 93       	push	r24
 520:	9f 93       	push	r25
 522:	af 93       	push	r26
 524:	bf 93       	push	r27
 526:	ef 93       	push	r30
 528:	ff 93       	push	r31
	if(Timer1_ICU_Fptr!=NULL_PTR)
 52a:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <__data_end>
 52e:	f0 91 81 00 	lds	r31, 0x0081	; 0x800081 <__data_end+0x1>
 532:	30 97       	sbiw	r30, 0x00	; 0
 534:	09 f0       	breq	.+2      	; 0x538 <__vector_6+0x30>
	{
		Timer1_ICU_Fptr();
 536:	09 95       	icall
	}
 538:	ff 91       	pop	r31
 53a:	ef 91       	pop	r30
 53c:	bf 91       	pop	r27
 53e:	af 91       	pop	r26
 540:	9f 91       	pop	r25
 542:	8f 91       	pop	r24
 544:	7f 91       	pop	r23
 546:	6f 91       	pop	r22
 548:	5f 91       	pop	r21
 54a:	4f 91       	pop	r20
 54c:	3f 91       	pop	r19
 54e:	2f 91       	pop	r18
 550:	0f 90       	pop	r0
 552:	0f be       	out	0x3f, r0	; 63
 554:	0f 90       	pop	r0
 556:	1f 90       	pop	r1
 558:	18 95       	reti

0000055a <_exit>:
 55a:	f8 94       	cli

0000055c <__stop_program>:
 55c:	ff cf       	rjmp	.-2      	; 0x55c <__stop_program>
